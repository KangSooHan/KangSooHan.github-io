<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Whale - Jekyll</title>
    <description></description>
    <link>http://localhost:4000//</link>
    <atom:link href="http://localhost:4000//feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Wed, 18 Jan 2023 18:55:58 +0900</pubDate>
    <lastBuildDate>Wed, 18 Jan 2023 18:55:58 +0900</lastBuildDate>
    <generator>Jekyll v4.3.1</generator>
    
      <item>
        <title>Linked-List</title>
        <description>&lt;h2 id=&quot;list란&quot;&gt;List란?&lt;/h2&gt;
&lt;p&gt;리스트는 순서를 가진 데이터의 집합을 가리키는 추상 자료형입니다. 리스트를 사용하면 삽입 정렬, 병합 정렬, Stack, Priority Queue 등 다양한 자료구조 및 알고리즘을 구현할 수 있습니다. 리스트는 다음과 같은 특징을 가집니다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;동일한 데이터를 가지고 있어도 상관 없음&lt;/li&gt;
  &lt;li&gt;구현 방법에 따라 크게 두 가지로 나뉨
    &lt;ol&gt;
      &lt;li&gt;순차 List : 배열을 기반으로 구현된 List
$\rightarrow$ 1차원 배열에 항목들을 순서대로 저장(거의 구현 X) : 삭제 및 삽입 시 항목들을 이동해야 함 &amp;amp; 메모리 낭비 초래&lt;/li&gt;
      &lt;li&gt;연결 List : 메모리의 동적 할당을 기반으로 구현된 List
$\rightarrow$ 개별적으로 위치하고 있는 원소의 주소를 연결하여 하나의 전체적인 자료구조를 이룸 &amp;amp; 물리적 순서 X &amp;amp; 메모리 효율적 사용&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;연결-리스트-구조&quot;&gt;연결 리스트 구조&lt;/h3&gt;
&lt;p&gt;연결 리스트는 Data와 연결될 다음 노드의 주소인 Link 필드로 구성된 Node로 이루어져 있습니다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Node : 연결 List에서 하나의 원소에 필요한 구성 요소&lt;/li&gt;
  &lt;li&gt;Data : Node안에 저장된 실제 값&lt;/li&gt;
  &lt;li&gt;Link : 다음 노드의 주소가 저장된 주소 값&lt;/li&gt;
  &lt;li&gt;Head : LIst의 처음 노드를 가리키는 주소&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/algorithm/Node.jpg&quot; width=&quot;60%&quot; height=&quot;60%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;list와-array&quot;&gt;List와 Array&lt;/h3&gt;
&lt;p&gt;List와 Array는 유사해 보이지만 조금 차이가 있습니다. Array는 indexing(Random Access)가 O(1)로 매우 빠르지만 List는 O(N)으로 느립니다. list는 indexing을 하기 위해서 search의 과정이 필요하기 때문입니다. 그렇지만 List는 Array에 비해 빠른 삽입/삭제 연산을 수행할 수 있습니다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Array는 삽입 연산을 수행할 때 수행 위치의 뒤 배열들을 모두 한칸씩 뒤로 미뤄야 하기 때문에 최악의 경우 O(N)의 시간이 걸립니다. 삭제 연산도 마찬가지로 수행 위치의 뒤 배열을 앞으로 한칸씩 땡겨야 하기 때문에 최악의 경우 O(N)의 시간이 걸립니다. &lt;br /&gt;
&lt;img src=&quot;/assets/img/algorithm/Array_Insert_Delete.jpg&quot; width=&quot;40%&quot; height=&quot;40%&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;List는 삽입 연산을 수행할 때 수행 위치를 찾는 Find O(N) 이후 삽입 O(1)의 시간이 걸립니다. 삭제 연산도 마찬가지로 Find O(N)과 삭제 O(1)의 시간이 걸립니다. 하지만 맨 앞 혹은 뒤에 삽입 삭제를 하거나, 중간 노드의 값을 아는 경우, Random Access가 불가능한 Data 값을 기반으로한 삽입 삭제를 진행할 때 Array보다 큰 강점을 가집니다.&lt;br /&gt;
&lt;img src=&quot;/assets/img/algorithm/List_Insert_Delete.jpg&quot; width=&quot;50%&quot; height=&quot;40%&quot; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;list의-삽입-삭제&quot;&gt;List의 삽입 삭제&lt;/h3&gt;
&lt;p&gt;List는 다음과 같은 삭제 삽입 연산을 통해서 형태를 유지합니다.&lt;br /&gt;
&lt;strong&gt;삽입&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;head = NULL인 경우
Head가 nullptr인 경우 리스트에 값이 없는 경우임으로 head$\rightarrow$next = new_node&lt;/li&gt;
  &lt;li&gt;head != NULL인 경우
Head가 nullptr이 아닌 경우 리스트에 값을 삽입하기 위해서는 원하는 위치를 find 한 뒤 find_node$\rightarrow$next = new_node&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;삭제&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;head = NULL인 경우
Head가 nullptr인 경우 리스트에 값이 없는 경우임으로 return&lt;/li&gt;
  &lt;li&gt;head != NULL인 경우
Head가 nullptr이 아닌 경우 리스트에 값을 삭제하기 위해서는 원하는 위치를 find 한 뒤 find_node$\rightarrow$next = find_node$\rightarrow$next$\rightarrow$next&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Find(찾기)&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;head = NULL인 경우
빈 리스트임으로 return&lt;/li&gt;
  &lt;li&gt;head != NULL인 경우
node = head$\rightarrow$next 이고 node$\rightarrow$next가 특정 값일 때 까지 반복하며 진행&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/KangSooHan/algorithm/blob/main/DataStructure/SinglyLinkedList/main.cpp&quot;&gt;Singly Linked List 구현&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://github.com/KangSooHan/algorithm/blob/main/DataStructure/DoublyLinkedList/main.cpp&quot;&gt;Doubly Linked List 구현&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Wed, 18 Jan 2023 00:00:00 +0900</pubDate>
        <link>http://localhost:4000//2023/01/List.html</link>
        <guid isPermaLink="true">http://localhost:4000//2023/01/List.html</guid>
        
        
        <category>algorithm</category>
        
      </item>
    
      <item>
        <title>SWExpert 3316 동아리실 관리하기 - D4</title>
        <description>&lt;p&gt;문제 링크 : &lt;a href=&quot;https://swexpertacademy.com/main/code/problem/problemDetail.do?contestProbId=AWBnFuhqxE8DFAWr&quot;&gt;https://swexpertacademy.com/main/code/problem/problemDetail.do?contestProbId=AWBnFuhqxE8DFAWr&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;to-solve&quot;&gt;To Solve&lt;/h3&gt;
&lt;p&gt;이 문제는 bits에 대해서 학습하기 위한 기본 문제 중 하나입니다. &lt;br /&gt;
추가적으로 이 문제를 풀기 위해서 DP 방법을 사용했습니다. &lt;br /&gt;
첫 날에는 A가 키를 가지고 있고 Master가 정해져 있기 때문에 반복문을 돌면서 A를 포함하고 Master를 포함하는 집합을 구하고 cnt[0][A]에 1의 값을 줍니다.(경우의 수 1개) &lt;br /&gt;
두번 째 날에는 이전 반복문의 경우의 수와 현재의 경우의 수를 비교하면서 AND 연산을 계산해 동일 원소가 있는지 확인합니다. &lt;br /&gt;
만일 동일 원소가 존재한다면 현재 케이스에 숫자를 카운팅 하는 cnt[i][A]에 더해줍니다. &lt;br /&gt;
이러한 방식을 반복적이게 끝까지 진행하면 원하는 결과를 얻을 수 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/algorithm/bit_3316.jpg&quot; width=&quot;50%&quot; height=&quot;50%&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#include&lt;/span&gt; &lt;span class=&quot;cpf&quot;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;
#include&lt;/span&gt; &lt;span class=&quot;cpf&quot;&gt;&amp;lt;string.h&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;
&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#define MAX 1000000007
&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;freopen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;input.txt&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;r&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stdin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10002&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cnt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10002&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;scanf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%d&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10002&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;cnt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;scanf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%s&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;len&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strlen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ans&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;master&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;&apos;A&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;master&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;continue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;cnt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

                &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cnt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;continue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;master&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;continue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;cnt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cnt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cnt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MAX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;ans&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ans&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cnt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MAX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

       &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;#%d %d&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ans&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;
&lt;a href=&quot;https://github.com/KangSooHan/algorithm/blob/main/SWExpert/BITS/3316/main.cpp&quot;&gt;Code&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 17 Jan 2023 00:00:00 +0900</pubDate>
        <link>http://localhost:4000//2023/01/swexpert-3316.html</link>
        <guid isPermaLink="true">http://localhost:4000//2023/01/swexpert-3316.html</guid>
        
        
        <category>algorithm</category>
        
      </item>
    
      <item>
        <title>SWExpert 1288 새로운 불면증 치료법 - D2</title>
        <description>&lt;p&gt;문제 링크 : &lt;a href=&quot;https://swexpertacademy.com/main/code/problem/problemDetail.do?contestProbId=AV18_yw6I9MCFAZN&quot;&gt;https://swexpertacademy.com/main/code/problem/problemDetail.do?contestProbId=AV18_yw6I9MCFAZN&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;to-solve&quot;&gt;To Solve&lt;/h3&gt;
&lt;p&gt;이 문제는 bits에 대해서 학습하기 위한 기본 문제 중 하나입니다. &lt;br /&gt;
반복문을 돌면서 value를 N, 2N, 3N, …, KN 형태로 만들어줍니다. &lt;br /&gt;
value 값의 나머지를 계산하고 10으로 나누는 것을 진행하면서 각 자리 숫자를 확인합니다. &lt;br /&gt;
각 자리 숫자와 check를 or 연산하면서 check가 모두 1이 되었을 때 종료합니다. \&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/algorithm/bit_1288.jpg&quot; width=&quot;50%&quot; height=&quot;50%&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#include&lt;/span&gt; &lt;span class=&quot;cpf&quot;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;
&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;freopen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;input.txt&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;r&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stdin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;scanf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%d&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ans&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;scanf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%d&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;check&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;check&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;check&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;ans&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;#%d %d&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ans&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;
&lt;a href=&quot;https://github.com/KangSooHan/algorithm/blob/main/SWExpert/BITS/1288/main.cpp&quot;&gt;Code&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 17 Jan 2023 00:00:00 +0900</pubDate>
        <link>http://localhost:4000//2023/01/swexpert-1288.html</link>
        <guid isPermaLink="true">http://localhost:4000//2023/01/swexpert-1288.html</guid>
        
        
        <category>algorithm</category>
        
      </item>
    
      <item>
        <title>SWExpert 10726 암호문3 - D3</title>
        <description>&lt;p&gt;문제 링크 : &lt;a href=&quot;https://swexpertacademy.com/main/code/problem/problemDetail.do?contestProbId=AV14zIwqAHwCFAYD&quot;&gt;https://swexpertacademy.com/main/code/problem/problemDetail.do?contestProbId=AV14zIwqAHwCFAYD&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;to-solve&quot;&gt;To Solve&lt;/h3&gt;
&lt;p&gt;이 문제는 List에 대해서 학습하기 위한 기본 문제 중 하나입니다. &lt;br /&gt;
리스트는 구현하는게 힘든 문제이기 때문에(사실 stl 사용하면 용이..) 별다르게 리뷰할 게 없습니다. \&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;a href=&quot;https://github.com/KangSooHan/algorithm/blob/main/SWExpert/LIST/1230/main.cpp&quot;&gt;Code&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 17 Jan 2023 00:00:00 +0900</pubDate>
        <link>http://localhost:4000//2023/01/swexpert-1230.html</link>
        <guid isPermaLink="true">http://localhost:4000//2023/01/swexpert-1230.html</guid>
        
        
        <category>algorithm</category>
        
      </item>
    
      <item>
        <title>SWExpert 10726 이진수 표현 - D3</title>
        <description>&lt;p&gt;문제 링크 : &lt;a href=&quot;https://swexpertacademy.com/main/code/problem/problemDetail.do?contestProbId=AXRSXf_a9qsDFAXS&quot;&gt;https://swexpertacademy.com/main/code/problem/problemDetail.do?contestProbId=AXRSXf_a9qsDFAXS&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;to-solve&quot;&gt;To Solve&lt;/h3&gt;
&lt;p&gt;이 문제는 bits에 대해서 학습하기 위한 기본 문제 중 하나입니다. &lt;br /&gt;
끝의 비트가 1인지 0인지 확인하였습니다. &lt;br /&gt;
그 이후 비트를 오른쪽으로 쉬프트하여 끝 비트가 1인지 0인지 확인하였습니다. &lt;br /&gt;
이를 반복적으로 n번 수행하였을 때, flag가 참이면 ON 아니면 OFF를 내도록 하였습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/algorithm/bit_10726.jpg&quot; width=&quot;50%&quot; height=&quot;50%&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#include&lt;/span&gt; &lt;span class=&quot;cpf&quot;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;
&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;freopen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;input.txt&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;r&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stdin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;scanf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%d&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ans&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cnt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;scanf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%d %d&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flag&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// 끝 비트가 0인지 1인지 확인하기&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;flag&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// 비트 SHIFT&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;flag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;flag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;#%d ON&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;#%d OFF&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;
&lt;a href=&quot;https://github.com/KangSooHan/algorithm/blob/main/SWExpert/BITS/10726/main.cpp&quot;&gt;Code&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 17 Jan 2023 00:00:00 +0900</pubDate>
        <link>http://localhost:4000//2023/01/swexpert-10726.html</link>
        <guid isPermaLink="true">http://localhost:4000//2023/01/swexpert-10726.html</guid>
        
        
        <category>algorithm</category>
        
      </item>
    
      <item>
        <title>Bits 연산</title>
        <description>&lt;h3 id=&quot;비트bit&quot;&gt;비트(bit)&lt;/h3&gt;
&lt;p&gt;컴퓨터에서 자료를 표현하기 위해 비트를 사용합니다. \&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;1bit = 0 또는 1&lt;/li&gt;
  &lt;li&gt;1byte = 8 bits&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;우리가 사용하는 Window에는 32 비트 혹은 64 비트 시스템이 있습니다. 여기서 얘기하는 비트가 우리가 배우려는 비트입니다. 우리가 프로그램을 실행할 때 CPU가 데이터를 처리하는데 이 때 처리하는 데이터의 최소 단위인 레지스터의 크기가 32bits 혹은 64bits라는 의미입니다. 레지스터는 CPU(Central Processing Unit)가 요청을 처리하는데 필요한 데이터를 일시적으로 저장하는 기억 장치 입니다. 레지스터는 명령을 처리하기 위해서 이들에 대한 주소 및 명령의 종류를 저장할 수 있는 기억 공간입니다. 이전에 32 bits 시스템일 경우 최대 2^32 bits 대략 4GB정도의 메모리만 인식이 가능하여 64bits 크기의 운영체제를 많이 사용하고 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;비트-연산자&quot;&gt;비트 연산자&lt;/h3&gt;
&lt;p&gt;아래의 표는 6가지 비트 연산자입니다.&lt;/p&gt;

&lt;table rules=&quot;groups&quot;&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt; &lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;비트 연산자&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;a=0b1010, b=0b0110&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&amp;amp;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;AND&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;a &amp;amp; b = 0b0010&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;|&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;OR&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;a | b = 0b1110&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;^&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;XOR&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;a ^ b = 0b1100&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;~&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;NOT&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;~a = 0b0101&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;«&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;left shift&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;a « 1 = a * $2^{n}$&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;»&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;right shift&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;a » n = a * $2^{-n}$&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;비트 연산은 우선순위에 주의가 필요합니다. 일반적으로 사칙연산은 비교, 논리 연산자보다 우선 순위가 높습니다. 하지만 비트 연산은 논리 연산보다 우선순위가 높으나 비교 연산보다는 낮습니다. 아래 두 식은 동일한 수식입니다.&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;비트-연산의-응용&quot;&gt;비트 연산의 응용&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;AND &amp;amp; : 비트 집합 두개를 AND하면 교집합&lt;/li&gt;
  &lt;li&gt;OR  | : 비트 집합 두개를 OR하면 합집합&lt;/li&gt;
  &lt;li&gt;XOR ^ : True/False를 번갈아 바꾸는 스위치 구현과 같이 몇 개의 bit를 바꿔서 대응되는 수를 구할 수 있음(ASCII코드에서 짝이 맞는 문자끼리 다른 bit를 XOR시키는 기법을 이용한 대소문자 변환 함수 등..)&lt;/li&gt;
  &lt;li&gt;NOT ~ : 비트 집합에 사용하면 가지고 있지 않은 원소들을 구할 수 있음&lt;/li&gt;
  &lt;li&gt;SHIFT » : 나누기 혹은 곱하기 연산을 대신해서 사용 가능(속도의 이점)&lt;/li&gt;
  &lt;li&gt;i &amp;amp; (1 « j) : i 숫자의 j 번째 bit가 1인지 아닌지를 판별&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;bit-masking&quot;&gt;Bit Masking&lt;/h3&gt;
&lt;p&gt;각 Bit하나를 Flag로 활용한다면 자료 저장과 집합 표현을 쉽게 할 수 있습니다. &lt;br /&gt;
0~31 사이의 번호가 매겨져 있고 사람 A의 친구 목록이 2의 배수이고, B의 친구 목록이 3의 배수라고 할 때, &lt;br /&gt;
A, B 모두와 친구인 사람은? &lt;br /&gt;
A 또는 B와 친구인 사람은? &lt;br /&gt;
과 같은 집합 문제를 비트를 사용하면 쉽게 풀 수 있습니다.&lt;/p&gt;

&lt;p rules=&quot;groups&quot;&gt;A $\quad$
|1|0|1|0|1|0|1|0|1|0|1|0|1|0|1|0|1|0|1|0|1|0|1|0|1|0|1|0|1|0|1|0|&lt;/p&gt;

&lt;p rules=&quot;groups&quot;&gt;B $\quad$
|1|0|0|1|0|0|1|0|0|1|0|0|1|0|0|1|0|0|1|0|0|1|0|0|1|0|0|1|0|0|1|0|&lt;/p&gt;

&lt;p rules=&quot;groups&quot;&gt;A &amp;amp; B(A B 모두와 친구) $\quad$
|1|0|0|0|0|0|1|0|0|0|0|0|1|0|0|0|0|0|1|0|0|0|0|0|1|0|0|0|0|0|1|0|&lt;/p&gt;

&lt;p rules=&quot;groups&quot;&gt;A | B(A 또는 B와 친구) $\quad$
|1|0|1|1|1|0|1|0|1|1|1|0|1|0|1|1|1|0|1|0|1|1|1|0|1|0|1|1|1|0|1|0|&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;data-compression&quot;&gt;Data Compression&lt;/h3&gt;
&lt;p&gt;문자열 두 개를 비교할 때 O(문자열의 길이)의 시간이 드는데, 만약 사용하는 문자의 가지수가 적다면 필요한 bit만 골라내어 압축시킬 수 있습니다.&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;compress&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;size_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;실수&quot;&gt;실수&lt;/h3&gt;
&lt;p&gt;우리는 소수점 이하의 실수를 표현할 때 정확한 값을 계산하는 것이 아닌 근사 값을 활용합니다. 소수점 이하 4자리를 10진수로 나타내보면 2진수 0.1은 10진수 0.5 2진수 0.01은 10진수 0.25 2진수 0.001은 10진수 0.125로 2진수 0.0001은 10진수 0.0625로 표현이 됩니다. 이런 점을 사용해 우리는 floating-point 표기법을 사용합니다. 예를 들어, 314.625를 bits로 표현하면 100111010.101이 됩니다. 이 2진수의 소수점을 아래와 같이 왼쪽으로 이동시켜서 1.00111010101 * $2^{8}$로 표현할 수 있습니다. 이때 부호 1비트 | 지수 8비트(숫자 8) | 가수 23비트(100111010101)로 숫자를 표현할 수 있습니다. 추가적으로 지수 비트에는 음수 양수의 값이 들어갈 수 있기 때문에 맨 앞 부호비트 + 7비트로 -128~127까지 표현할 수 있습니다.
&lt;img src=&quot;/assets/img/algorithm/Floating_Point.jpg&quot; width=&quot;50%&quot; /&gt;&lt;/p&gt;

</description>
        <pubDate>Tue, 17 Jan 2023 00:00:00 +0900</pubDate>
        <link>http://localhost:4000//2023/01/SWExpert_01.html</link>
        <guid isPermaLink="true">http://localhost:4000//2023/01/SWExpert_01.html</guid>
        
        
        <category>algorithm</category>
        
      </item>
    
      <item>
        <title>STL!!</title>
        <description>&lt;h2 id=&quot;sequence-containers&quot;&gt;Sequence Containers&lt;/h2&gt;
&lt;p&gt;데이터를 순차적으로 저장하는 자료 구조입니다. 구현이 단순하고 가벼우며 빠릅니다. 대표적으로 Vector(Arrray), Deque, List가 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;vectorarray&quot;&gt;Vector(Array)&lt;/h3&gt;
&lt;p&gt;메모리 상에서 데이터가 연속적으로 위치하는 배열입니다. 지금까지 흔하게 사용했던 배열들과 유사하지만 배열의 크기를 알 수 있고 변하지 않는다면 array를 동적인 크기를 원한다면 vector를 선택하면 됩니다. std::vector는 포인터 세 개로 구현이 되어 있습니다.&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;할당된 배열의 시작 주소를 가리키는 포인터&lt;/li&gt;
  &lt;li&gt;다음 데이터가 삽입될 위치를 가리키는 포인터&lt;/li&gt;
  &lt;li&gt;배열의 끝 주소를 가리키는 포인터&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/algorithm/Vector.jpg&quot; width=&quot;50%&quot; height=&quot;50%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;deque&quot;&gt;Deque&lt;/h3&gt;
&lt;p&gt;저장 공간의 앞, 뒤에 데이터를 빠르게 넣고 뺄 수 있는 Double-Ended QUEue(DEQUE)입니다. deque는 여러개의 버퍼에 데이터를 나눠서 저장합니다. Deque는 Vector에 비해서 앞뒤로 삽입 및 삭제가 빨라 유리해 보이지만 차이가 있습니다. Vector는 요소들이 메모리에 연속적으로 존재하는 것이 보장되지만, Deque는 요소들이 연속적인 것이 보장되지 않습니다. 따라서 배열과 관련된 라이브러리를 사용해야 할 때나 공간지역성을 고려해야 하는 상황에서는 deque가 불리한 점이 있습니다.
&lt;img src=&quot;/assets/img/algorithm/Deque.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;list&quot;&gt;List&lt;/h3&gt;
&lt;p&gt;흔하게 파이썬에서 알고 있는 리스트입니다. Linked list라고도 불리고 Container의 어느 위치든 O(1)(근사)에 데이터를 삽입하거나 삭제할 수 있지만 Indexing할 때 O(1)에 접근은 불가능합니다. std::list 형태는 Linked list중에서도 Doubly_Linked List이고, std::forward_list는 Singly-Linked List입니다. Singly Linked List는 Doubly Linked List에 비해 맨 뒤에 데이터를 삽입하는게 빠르거나 iterator 자신을 삭제하지 못하는 등 기능이 제한됩니다. 하지만 포인터를 하나 덜 가지기 때문에 연산이 빠르고 메모리가 적게 사용됩니다.
&lt;img src=&quot;/assets/img/algorithm/List.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;h2 id=&quot;associative-containers&quot;&gt;Associative Containers&lt;/h2&gt;
&lt;p&gt;데이터를 정렬된 상태로 유지하는 자료구조입니다. Red-Black Tree(RB-Tree)를 기반으로 하고 데이터의 추가/삭제/접근의 시간복잡도가 O(logN)입니다. 하지만 자료구조의 특성상 연산에 붙는 상수가 크고 메모리가 많이 필요하기 때문에 주의가 필요합니다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;set&quot;&gt;Set&lt;/h3&gt;
&lt;p&gt;RB-Tree는 BST의 일종으로 어떤 key 값을 기준으로 데이터를 저장합니다. std::set은 데이터 자체를 key로 사용하고, std::map은 (key, value)쌍을 받아서 사용합니다. 단순히 데이터를 정렬 상태로 유지하고 싶다면 std::set을 (key, value) 데이터 쌍을 key 기준으로 정렬하고 싶다면 std::map을 사용하면 됩니다. (Key 값의 중복이 허용되지 않습니다.)&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;multiset&quot;&gt;MultiSet&lt;/h3&gt;
&lt;p&gt;Key값의 중복을 허용하지 않는 Set과 다르게 MultiSet은 Key값의 중복을 허용합니다. 다만 시간 복잡도의 주의가 매우 필요한 편입니다. Multiset은 같은 key를 모두 세고, 모두 접근하는 형식이기 때문에 O(logN + key 데이터 수) 만큼의 시간이 듭니다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;h2 id=&quot;unordered-associative-containers&quot;&gt;Unordered Associative Containers&lt;/h2&gt;
&lt;p&gt;해시 값을 사용해 데이터를 저장하는 자료구조입니다. 대부분의 경우 데이터의 추가/삭제/접근이 O(1)이므로 Associative Container보다 효율적입니다. 하지만 데이터를 정렬된 상태로 유지해야 하거나 해시 충돌이 걱정되는 상황이라면 Associative Container를 사용하는 것이 좋습니다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;unordered_set&quot;&gt;Unordered_set&lt;/h3&gt;
&lt;p&gt;Data를 중복 없이 저장하고 싶고, 순서가 상관없을 때 사용할 수 있습니다. &lt;br /&gt;
데이터를 여러 개의 Bucket에 나누어 저장하고, 주어진 key의 해시 값과 bucket 크기의 나머지 연산을 통해 어떤 버킷에 들어갈 지 정합니다. 이 때문에 다른 key값이여도 동일한 bucket에 들어갈 수 있습니다. 이를 해시 충돌이라고 하며 각 Bucket을 linked list로 쌍을 저장하여 해결할 수 있습니다. 최악의 시간 복잡도는 O(N) (모든 데이터가 하나의 버킷 &amp;amp; linked list 순회)입니다. std::unordered_set 혹은 Unordered_multiset 형태로 std::unordered_multiset으로 사용할 수 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;etc&quot;&gt;ETC…&lt;/h2&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;stack&quot;&gt;Stack&lt;/h3&gt;
&lt;p&gt;LIFO(Last-In, First-Out) 형태의 자료구조인 Stack입니다. std::stack을 통해 사용할 수 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;queue&quot;&gt;Queue&lt;/h3&gt;
&lt;p&gt;FIFO(First-In, First-Out) 형태의 자료구조인 Queue입니다. std::queue을 통해 사용할 수 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/algorithm/Stack_Queue.jpg&quot; width=&quot;40%&quot; height=&quot;40%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;priority-queue매우중요&quot;&gt;Priority-Queue(매우중요!!!)&lt;/h3&gt;
&lt;p&gt;Max heap 형태로 유지되는 container입니다. 데이터가 완전하게 정렬된 상태는 아니지만 최대 혹은 최솟값을 빠르게 찾을 수 있습니다. 연속적으로 데이터의 최댓값 또는 최솟값만 필요할 때 매우 효율적이게 동작합니다.&lt;/p&gt;
</description>
        <pubDate>Mon, 16 Jan 2023 00:00:00 +0900</pubDate>
        <link>http://localhost:4000//2023/01/STL.html</link>
        <guid isPermaLink="true">http://localhost:4000//2023/01/STL.html</guid>
        
        
        <category>algorithm</category>
        
      </item>
    
      <item>
        <title>Collision Detection System</title>
        <description>&lt;h3 id=&quot;collision-detection-system&quot;&gt;Collision Detection System&lt;/h3&gt;
&lt;p&gt;이번장에서는 Collision Detection System을 하도록 하겠습니다. 이를 위해 시간, 거리, 속도와 가속도를 사용해 sensor의 모션을 재구성합니다. 우리는 간단하고 학습을 위한 용도이기 때문에 속도 또는 가속도는 변하지 않는다는 절대적인 가정을 하고 시작하도록 하겠습니다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;the-collision-detection-problem&quot;&gt;The Collision Detection Problem&lt;/h3&gt;
&lt;p&gt;Collision Avoidance System(CAS)은 운전을 하는 도중에 충돌이 임박했을 때 운전자에게 알려주거나 brake를 동작하는 보조 장치입니다. CAS는 자동차와의 충돌을 평가하기 위해 TTC(time-to-collision)를 계속해서 계산합니다. 아래 그림에서 노란색 차량과 초록색 차량의 거리는 time 0에서의 거리는 $d_{0}$입니다. 이 때 time $t_{0}$에서 초록색 차량이 속도를 줄이게 된다면, time $t_{1}$에서 노락색 차량과 초록색 차량의 거리는 $d_{1}$이 됩니다. 이것을 사용하여 노란색 차량과 초록색 차량의 거리 $d_{i}$가 0이 되는 시간 $t_{i}$가 TTC 입니다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&quot;cvmconstant-velocity-model&quot;&gt;CVM(Constant Velocity Model)&lt;/h4&gt;
&lt;p&gt;TTC를 계산하기 위해서 우리는 몇가지 가정이 필요합니다. 첫 번째 가정은 노란색 차량과 초록색 차량의 속도는 constant하다는 것입니다. 이것은 eq.1 번의 CVM(Constant Velocity Model) 모델을 만들어줍니다.&lt;/p&gt;

&lt;p&gt;$ eq 1. \quad d(t+\Delta t) = d(t) - v_{0} \cdot \Delta t$&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&quot;camconstant-acceleration-model&quot;&gt;CAM(Constant Acceleration Model)&lt;/h4&gt;
&lt;p&gt;하지만 CVM만 가지고 모델링을 하게되면 정확도가 매우 낮습니다. 그래서 eq 3.과 같은 velocity와 acceleration의 수식을 사용하여 eq 2.번과 같은 CAM 모델을 만들 수 있습니다.&lt;/p&gt;

&lt;p&gt;$ eq 2. \quad d(t+\Delta t) = d(t) - v(t) \cdot \Delta t - \frac{1}{2}a_{0} \cdot \Delta t^{2}$ &lt;br /&gt;
$ eq 3. \quad v(t+\Delta t) = v(t) - a_{0} \cdot \Delta t $&lt;/p&gt;

&lt;p&gt;실제 환경에서는 CVM보다 CAM이 훨씬 좋은 성능을 보이지만 우리는 CVM 모델을 기반으로 공부를 하도록 하겠습니다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;estimating-ttc-with-lidar&quot;&gt;Estimating TTC with Lidar&lt;/h3&gt;
&lt;p&gt;Lidar에서 TTC를 계산하는 것은 아래 그림과 수식처럼 확인할 수 있습니다.(CVM 기반의 Lidar TTC) &lt;br /&gt;
&lt;img src=&quot;/assets/img/sensorfusion/Lidar_TTC.jpg&quot; width=&quot;50%&quot; height=&quot;50%&quot; /&gt; &lt;br /&gt;
$ eq 1. \quad d(t+\Delta t)= d(t)-v_{0} \cdot \Delta t $ &lt;br /&gt;
$ eq 2. \quad v_{0}=\frac{d(t) - d(t + \Delta t)}{\Delta t} = \frac{d_{0} - d_{1}}{\Delta t}$ &lt;br /&gt;
$ eq 3. \quad TTC = \frac{d_{1}}{v_{0}} = \frac{d_{1} \cdot \Delta t}{d_{0} - d_{1}} $&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
Rader는 상대 속도에 관한 정보를 포함하기 때문에 TTC를 측정할 수 있지만 Lidar로 얻은 point cloud는 depth를 기반으로 계산하기 때문에 두가지 거리 측정을 통해 계산해야 합니다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;도로 표면에 있는 measurements를 제거&lt;/li&gt;
  &lt;li&gt;low reflectivity measurements를 제거&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/sensorfusion/Remove_Lidar_Point.jpg&quot; width=&quot;50%&quot; height=&quot;50%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;estimating-ttc-with-a-camera&quot;&gt;Estimating TTC with a Camera&lt;/h3&gt;
&lt;p&gt;앞에서 Lidar를 사용한 TTC를 계산하였습니다. 그리고 Lidar를 사용한 TTC 계산은 어려운 부분도 있었지만 매우 강력하게 잘 동작합니다. 이번 장에서는 Camera를 사용한 TTC를 진행합니다. Camera는 3D 측정값을 포함하고 있지 않고, 안정적이고 정확하게 차량의 움직임을 추적하기 위해서 차량을 정확하게 식별해야 합니다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;measuring-ttc-without-distance&quot;&gt;Measuring TTC without distance&lt;/h3&gt;
&lt;p&gt;Monocular 카메라는 거리를 측정할 수 없습니다. 왜냐하면 레이더나 라이다 처럼 파장을 쏘는 것이 아닌 주변 빛에 의존하는 Passive Sensor이기 때문입니다. 따라서 거리를 측정하기 위해서는 두번째 카메라가 필요합니다. 정교하게 정렬된 두개의 카메라들(stereo setup이라 불리는)로 얻은 이미지에서 두 이미지의 공통 관심 지점(feature extraction)을 찾은 다음 카메라 기하학 및 perspective projection(투시 투영)을 사용하여 삼각 측량을 진행하면 거리를 계산할 수 있습니다. &lt;br /&gt;
우리는 이제 앞서 배웠던 CVM을 카메라를 통해 계산합니다. 우리는 distance $d$를 이미지 평면에서 픽셀 거리를 통해 획득할 수 있습니다. 아래 그림을 보면 주행중인 자동차의 높이 $H$를 perspective projection을 사용하여 이미지 평면에 매핑시킬 수 있습니다. 이 때, 주행중인 자동차의 높이 $H$는 동일하지만, 거리 $d_{0}$과 $d_{1}$에 따라 이미지 평면에 맺히는 높이 $h_{0}$와 $h_{1}$은 다른 것을 확인할 수 있습니다. 그래서 우리는 명백한 값 $d$를 $h, H$ 그리고 focal length $f$를 통해 얻을 수 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/sensorfusion/Camera_TTC_Distance.jpg&quot; width=&quot;50%&quot; height=&quot;50%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;strong&gt;$\qquad$ project object into camera&lt;/strong&gt; &lt;br /&gt;
1번 수식에서 우리는 camera의 focal length $f$와 distance measurement $d_{0}$을 통해 높이 $H$의 자동차를 pixel 높이 $h_{0}$를 표현할 수 있습니다. time $t_{1}$에서도 동일합니다. &lt;br /&gt;
$Eq 1. \quad h_{0} = \frac{f \cdot H}{d_{0}}; h_{1} = \frac{f \cdot H}{d_{1}} $&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;strong&gt;$\qquad$ relate projection and distance&lt;/strong&gt; &lt;br /&gt;
2번 수식에서 우리는 $h_{1}$과 $h_{0}$의 비율을 계산하고 Eq 1.을 사용하여 $d_{0}$과 $d_{1}$의 관계도 표현할 수 있습니다. &lt;br /&gt;
$Eq 2. \quad \frac{h_{1}}{h_{0}} = \frac{\frac{f \cdot H}{d_{1}}}{\frac{f \cdot H}{d_{0}}} = \frac{d_{0}}{d_{1}} \rightarrow d_{0} = d_{1} \cdot \frac{h_{1}}{h_{0}} $&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;strong&gt;$\qquad$ substitute in constant-velocity model&lt;/strong&gt; &lt;br /&gt;
3번 수식에서 CVM에서 $d_{0}$을 대체하여 $d_{1}$을 풀 수 있습니다. 이렇게 하면 우리는 velocity $v_{0}$, image plane에 맺히는 차의 pixel 높이 $h_{0}, h_{1}$로 $d_{1}$을 표현할 수 있습니다. &lt;br /&gt;
$Eq 3. \quad d_{1} = d_{0} - v_{0} \cdot \Delta t = d_{1} \cdot \frac{h_{1}}{h_{0}} - v_{0} \cdot \Delta t $&lt;br /&gt;
$ \qquad\quad d_{1} = \frac{-v_{0} \cdot \Delta t}{(1-\frac{h_{1}}{h_{0}}} $&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;strong&gt;$\qquad$ compuote time to contact / collision&lt;/strong&gt; &lt;br /&gt;
4번 수식에서는 앞서 얻은 $d_{1}$을 기반으로 TTC를 계산할 수 있습니다. 그러면 최종적으로 $h_{1}, h_{0}$을 통해서 TTC를 계산할 수 있는 수식을 획득할 수 있습니다.&lt;br /&gt;
$Eq 4. \quad TTC = \frac{d_{1}}{v_{0}} = \frac{-\Delta t}{(1-\frac{h_{1}}{h_{0}})}$&lt;/p&gt;

&lt;p&gt;그러므로 그러므로 우리는 이미지 센서를 통해 얻은 이미지 pixel의 높이 변화(relative height, scale change)만을 관찰하여 TTC를 계산할 수 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;using-texture-keypoints-instead&quot;&gt;Using Texture Keypoints Instead&lt;/h3&gt;
&lt;p&gt;NN로 계산한 Bounding Box는 계속해서 크기가 변경이 되어 정확한 결과를 얻기 어렵습니다. 이러한 문제는 TTC를 계산할 때 큰 에러를 가져올 수 있습니다. 그래서 우리는 uniquely identifiable keypoints를 찾고 이 keypoints를 통해 높이를 계산하도록 하겠습니다.&lt;/p&gt;

&lt;p&gt;&amp;lt;p align=”center”&lt;img src=&quot;/assets/img/sensorfusion/Camera_KeyPoint_TTC.jpg&quot; width=&quot;60%&quot; height=&quot;60%&quot; /&gt;&amp;lt;/p&amp;gt;&lt;/p&gt;

&lt;p&gt;그림(a)에서 자동차에 7가지의 keypoints를 찾았습니다. 그림 (b)에서는 descriptor라 불리는 higher-dimensional similarity measure를 사용하여 4개의 keypoints가 매칭이 되었습니다. 우리는 여기서 얻은 $d_{k}$ 값들의 평균 혹은 중앙 값으로 TTC를 계산합니다.\&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;h3 id=&quot;단어&quot;&gt;단어&lt;/h3&gt;
&lt;p&gt;Imminent : 임박한 &lt;br /&gt;
Tailgate : 뒷문, 바짝 따라 달리다 &lt;br /&gt;
Deviation : 편차 &lt;br /&gt;
Curvature : 곡선의 &lt;br /&gt;
Substitute : 대체하다&lt;/p&gt;
</description>
        <pubDate>Mon, 16 Jan 2023 00:00:00 +0900</pubDate>
        <link>http://localhost:4000//2023/01/Camera_03.html</link>
        <guid isPermaLink="true">http://localhost:4000//2023/01/Camera_03.html</guid>
        
        
        <category>sensorfusion</category>
        
      </item>
    
      <item>
        <title>OpenCV</title>
        <description>&lt;h2 id=&quot;opencv&quot;&gt;OpenCV&lt;/h2&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;matrix-datatype&quot;&gt;Matrix Datatype&lt;/h3&gt;
&lt;p&gt;Opencv는 기본 데이터 형식 cv::Mat datatype에 이미지를 저장하고 조작합니다. 이 형태는 다양한 차원의 숫자를 처리할 수 있으며 raster scan order이라 불리는 방식으로 정렬되어 저장됩니다. 2D image인 grayscale image의 경우 데이터가 행으로 구성되고 각 행이 차례대로 등장합니다. 3D인 RGB의 경우 평면으로 배열이 되어있으며, 각 평면은 한 줄씩 채워지고 평면이 차례대로 채워집니다.&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;/assets/img/sensorfusion/Raster_Scan.jpg&quot; width=&quot;50%&quot; height=&quot;50%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;manipulating-matrices&quot;&gt;Manipulating Matrices&lt;/h3&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&quot;fixed-pixel-type&quot;&gt;Fixed Pixel Type&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;CV_8UC1 : 8-bit unsigned integer : uchar(0~255)&lt;/li&gt;
  &lt;li&gt;CV_8UC3 : 8-bit signed integer : uchar with 3-D&lt;/li&gt;
  &lt;li&gt;CV_8SC1 : 8-bit signed integer : schar(-128~127)&lt;/li&gt;
  &lt;li&gt;CV_16UC1 : 16-bit unsigned integer : ushort(0~65535)&lt;/li&gt;
  &lt;li&gt;CV_16SC1 : 16-bit signed integer : short(-32768~32767)&lt;/li&gt;
  &lt;li&gt;CV_32SC1 : 32-bit signed integer : int(-21…~21…)&lt;/li&gt;
  &lt;li&gt;CV_32FC1 : 32-bit floating-point number : float(-FLT_MAX~FLT_MAX)&lt;/li&gt;
  &lt;li&gt;CV_64FC1 : 64-bit floating-point number : double(-DBL_MAX~DBL_MAX)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&quot;create-matrix&quot;&gt;Create Matrix&lt;/h4&gt;
&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;createMatrix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nrows&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;480&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ncols&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;640&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;cv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Mat&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m1_8u&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Create 1D uchar(0~255) with size (480, 640) Matrix&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;m1_8u&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nrows&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ncols&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CV_8UC1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;m1_8u&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setTo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Scalar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;             &lt;span class=&quot;c1&quot;&gt;// White Screen&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Create 3D uchar(0~255) with size (480, 640 Matrix)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;cv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Mat&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m3_8u&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;m3_8u&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nrows&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ncols&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CV_8UC3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// three-channel matrix with 8bit unsigned elements&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;m3_8u&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setTo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Scalar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;255&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;     &lt;span class=&quot;c1&quot;&gt;// Blue Screen(BGR types)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&quot;change-pixels&quot;&gt;Change Pixels&lt;/h4&gt;
&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;changePixels&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// create matrix&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nrows&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;480&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ncols&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;640&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;cv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Mat&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m1_8u&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;m1_8u&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nrows&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ncols&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CV_8UC1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// two-channel matrix with 8bit unsigned elements&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;m1_8u&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setTo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Scalar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;          &lt;span class=&quot;c1&quot;&gt;//black&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;230&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;250&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// STUDENT TASK : loop over all columns and set matrix elements to 255&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ncols&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;     &lt;span class=&quot;c1&quot;&gt;// loop over all columns&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;m1_8u&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;at&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;255&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// set r, c elements to 255&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;h3 id=&quot;function&quot;&gt;Function&lt;/h3&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;cvmatcreate&quot;&gt;cv::Mat::create&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;create(int rows, int cols, int types) : rows * cols 이미지를 types(Fixed Pixel Type) 형태로 생성&lt;/li&gt;
  &lt;li&gt;create(int size, int types) : size * size 이미지를 types(Fixed Pixel Type) 형태로 생성&lt;/li&gt;
  &lt;li&gt;create(int dim, int* size, int types) : size크기의 배열을 ndims의 크기로 생성(ex 200, arr[200&lt;em&gt;200] -&amp;gt; 200&lt;/em&gt;200 이미지)&lt;/li&gt;
  &lt;li&gt;create(std::vector&amp;lt;int&amp;gt;&amp;amp; sizes, int types) : vector 형태의 배열을 types 형태의 이미지로 생성&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;cvmatsetto&quot;&gt;cv::Mat::setTo&lt;/h3&gt;
&lt;p&gt;setTo(inputArray value, inputArray mask) : Matrix의 mask 영역을 value로 설정&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;cvnamedwindow---highguihpp&quot;&gt;cv::namedWindow -&amp;gt; highgui.hpp&lt;/h3&gt;
&lt;p&gt;namedWindow(const string &amp;amp;winname, int flags) : winname이름의 types 형태 윈도우를 생성&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;cvimshow---highguihpp&quot;&gt;cv::imshow -&amp;gt; highgui.hpp&lt;/h3&gt;
&lt;p&gt;imshow(const string &amp;amp;winname, InputArray mat) : matrix를 winname이름의 윈도우에 Display&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;h3 id=&quot;library&quot;&gt;Library&lt;/h3&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&quot;opencv2corecorehpp&quot;&gt;opencv2/core/core.hpp&lt;/h4&gt;
&lt;p&gt;코어 모듈은 기본적인 object types나 함수를 포함하고 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&quot;opencv2highguihighguihpp&quot;&gt;opencv2/highgui/highgui.hpp&lt;/h4&gt;
&lt;p&gt;highgui 모듈은 유저의 입력이나 display를 사용할 수 있는 UI 함수를 포함하고 있습니다. 자주 사용하는 cv::imshow가 여기 속해있습니다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&quot;opencv2imgprocimgprochpp&quot;&gt;opencv2/imgproc/imgproc.hpp&lt;/h4&gt;
&lt;p&gt;imgproc 모듈은 image transformations(filtering, geometric transformation, feature detection, tracking과 같은) 함수를 포함하고 있습니다.&lt;/p&gt;

&lt;h4 id=&quot;opencv2features2dfeatures2dhpp&quot;&gt;opencv2/features2d/features2d.hpp&lt;/h4&gt;
&lt;p&gt;feature2d 모듈은 detection, describing, matching keypoints과 같은 함수를 포함하고 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;h3 id=&quot;단어&quot;&gt;단어&lt;/h3&gt;
</description>
        <pubDate>Thu, 12 Jan 2023 00:00:00 +0900</pubDate>
        <link>http://localhost:4000//2023/01/Camera_02.html</link>
        <guid isPermaLink="true">http://localhost:4000//2023/01/Camera_02.html</guid>
        
        
        <category>etc</category>
        
      </item>
    
      <item>
        <title>Camera Start!!</title>
        <description>&lt;h2 id=&quot;camera&quot;&gt;Camera&lt;/h2&gt;
&lt;p&gt;이번장에서는 카메라에 대해서 학습하도록 하겠습니다. &lt;br /&gt;
카메라는 2D Image 정보를 해석할 수 있습니다. 이는 인간의 눈과 같은 단점을 가지기도 합니다.(ex Darkness, 빛번짐, 많은 비…) 하지만 이러한 점은 사람의 Visual Perception을 기반으로 구성된 우리 환경에서 강점으로 다가올 수 있습니다.(ex 신호등은 빨간 주황 초록 …). 따라서 우리는 카메라에 대해서 더 나아가 이미지를 처리하는 기술들(Image Processing &amp;amp; Computer Vision)&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;카메라 기술 &amp;amp; 광학&lt;/li&gt;
  &lt;li&gt;Image Processing &amp;amp; Computer Vision&lt;/li&gt;
  &lt;li&gt;Sensur Fusion with Lidar&lt;/li&gt;
  &lt;li&gt;Project : Collision Avoidance&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;에 대해서 학습하도록 하겠습니다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;camera--rader--lidar&quot;&gt;Camera &amp;amp; Rader &amp;amp; Lidar&lt;/h3&gt;
&lt;p&gt;Sensor Fusion을 하는 이유는 각각 센서들이 가지고 있는 장점들이 다르기 때문입니다. 표는 다음과 같이 각각의 센서들이 좋은 점과 나쁜 점을 알 수 있습니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/img/sensorfusion/SensorTable.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Camera Technology 
카메라 기술은 이미지를 3D Space로 재구성 할 때 많은 도움이 되며, 카메라 geometry와 coordinate system을 배우는 것이 중요합니다. 따라서 이번 장에서는 Camera Basic Technology(pinhole camera, lenses …)에 대해서 학습합니다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;pinhole-camera&quot;&gt;Pinhole Camera&lt;/h3&gt;
&lt;p&gt;간단한 카메라는 Ojbect 사이에 작은 구멍(Pinhole)이 있는 빛 장벽을 배치하여 설계할 수 있습니다. 물체에 의해 반사된 빛은 핀홀을 통과하여 이미지로 저장하는 감광성(빛에 노출됐을 때 반응하는) 센서에 도달하게 됩니다. 핀홀이 작은 이유는 Object의 여러 부분에서 발생하는 빛들이 중첩되어 이미지가 Blurring 되는 것을 방지하기 위해서입니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/img/sensorfusion/PinHole.jpg&quot; width=&quot;50%&quot; height=&quot;50%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Pinhole 카메라에서 Photosensitive Surface는 왼쪽에 Image Plane입니다. Camera center인 pinhole과 image plane까지의 수직 거리를 focal length $f$라 부릅니다. &lt;br /&gt;
오프젝트의 한 점 포인트 $P$에서 반사된 빛을 image plane에 $P’$으로 매핑시키면 아래 그림과 같이 됩니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/img/sensorfusion/PointMapping.jpg&quot; width=&quot;30%&quot; height=&quot;30%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이 때 $P$와 $P’$의 관계는 다음과 같이 나타낼 수 있습니다. &lt;br /&gt;
$\overrightarrow{P} = \begin{bmatrix} x \\ y \\ z \\ \end{bmatrix} \rightarrow \overrightarrow{P’} = \begin{bmatrix} x’ \\ y’ \\ \end{bmatrix}$ &lt;br /&gt;
$(1)\;x’\,=\,f\cdot\frac{x}{z} \qquad(2)\;y’\,=\,f\cdot\frac{y}{z}$ &lt;br /&gt;
이 수식을 사용하면 우리는 3D 좌표와 Focal Length를 사용하여 image plane에 생기는 2D 좌표를 획득할 수 있습니다. 하지만 이는 pixel 단위는 아직 아닙니다.&lt;/p&gt;

&lt;h4 id=&quot;pinhole-camera-problem&quot;&gt;Pinhole Camera Problem&lt;/h4&gt;
&lt;p&gt;Pinhole Camera의 가장 큰 문제점은 핀홀을 통과하는 빛의 양이 이미지 센서에 적절한 이미지를 생성하기에 충분하지 않은 것입니다. 그렇다고 핀홀의 크기를 넓혀 빛의 양을 증가시키면 대상 물체의 다른 부분에서 나오는 광선이 중첩되어 Blurring 효과가 발생합니다. 이러한 방법을 해결하는 것이 같은 위치에서 나오는 빛 광선을 포착할 수 있는 Lens를 사용하는 것입니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/img/sensorfusion/LargePinhole.jpg&quot; width=&quot;50%&quot; height=&quot;50%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;lenses-and-aperture&quot;&gt;Lenses and Aperture&lt;/h3&gt;
&lt;p&gt;적절한 크기와 위치의 렌즈는 Object Point $P_{1}$ 의 빛 광선을 굴절시켜 image plane의 $ P^{‘}_{1}$ 지점으로 모아줍니다.&lt;/p&gt;

&lt;p&gt;Object Point $ P $의 거리가 더 가깝거나( $P_{2}$ ), 멀리 있는 경우($P_{1}$) image plane에서 point로 나타나지 않습니다. $P_{2}$의 경우 광선의 집합이 이미지 평면에 초점이 맞지 않기 때문에 유한한 반지름을 가진 원에 수렴하게 됩니다.($P_{1}$의 경우도 유사) 이 Blurring한 원을 우리는 COF(circle of confusion)이라 부릅니다. 우리는 조리개(Aperture)를 조절하여 이러한 blurring circle을 줄일 수 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/sensorfusion/Aperture.jpg&quot; width=&quot;30%&quot; height=&quot;30%&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;조리개를 작게 줄이면 &lt;br /&gt;
렌즈의 바깥부분을 통해 들어오는 빛이 차단되면서, image plane에 맺히는 COF의 크기가 줄어들게 됩니다. 그러나 적은 빛이 들어오기 때문에 이미지가 어둡게 생성됩니다.&lt;/li&gt;
  &lt;li&gt;조리개를 크게 만들면 &lt;br /&gt;
더 많은 빛이 이미지 영역에 들어오면서 더 밝은 이미지를 생성합니다. 하지만 COF의 크기가 커지게 됩니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/sensorfusion/Aperture_Image.jpg&quot; width=&quot;30%&quot; height=&quot;30%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;사진에서는 F값(조리개 값)이 높아 질수록 렌즈 조리개 구멍이 작아집니다.(16일 때 가장 어두움)&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;카메라-왜곡&quot;&gt;카메라 왜곡&lt;/h3&gt;
&lt;p&gt;여기까지 우리는 3D 물체가 PinHole Camera에서 상을 맺히는 것을 배웠습니다. 카메라에서도 3D 물체가 2D Image 상이 맺힐 때 유사한 과정을 거치지만, 실제로는 렌즈는 렌즈 유형에 따라 이미지에 왜곡을 발생시킵니다. 우리는 이런 왜곡을 “Radial Distortion”이라 부릅니다. 이러한 현상은 렌즈와 image plane까지의 focal length가 직경에 걸처 “균일”하지 않기 때문에 발생합니다. 따라서 카메라 중심(광축)과 렌즈를 통과하는 광선 사이의 거리에 따라서 렌즈의 확대 효과가 달라지게 됩니다. 우리는 배율이 증가해서 나오는 왜곡 효과를 “Pin Cushion Distortion”, 배율이 감소해서 나오는 왜곡 효과를 “Barrel Distortion”이라고 합니다. 광각 렌즈를 사용할 때 일반적으로는 Barrel Distortion이 발생합니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/img/sensorfusion/Distortion.jpg&quot; width=&quot;30%&quot; height=&quot;30%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이미지에서 Object의 정보를 얻기 위해서 왜곡 정보는 제거되거나 완화되어야 합니다. 이러한 과정을 우리는 Calibration이라고 부릅니다. 이 과정은 카메라 렌즈 설정에 대해 Distortion Parameters를 개별적으로 계산할 수 있는 과정을 의미합니다. 이는 일반적으로 알려진 Planar Checkerboard 사진을 여러장 촬영함으로써 수행할 수 있습니다. Planar Checkerboard는 기하학적 형상에서 렌즈와 이미지 센서 매개변수를 강력하게 도출할 수 있는 형태의 보드로 아래 그림과 같은 모양입니다. 우리는 이 Planar Checkerboard를 사용하여 카메라 이미지에서 왜곡을 제거하는데 이 과정을 Rectification(정류)라 부릅니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/img/sensorfusion/Checker_Board.jpg&quot; width=&quot;30%&quot; height=&quot;30%&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;projection-of-points-in-3d-space-onto-the-digital-image&quot;&gt;Projection of points in 3D Space onto the digital Image&lt;/h3&gt;
&lt;p&gt;앞서 말한바와 같이 3D Space의 점을 Image Plane에 Projection(투영)한 결과는 pixel로 이루어진 digital images에 완벽하게 일치하지 않습니다. 이번에는 Continuous한 결과를 Discrete한 pixel로 표현하는 digital 이미지에 대해 이해해 보도록 하겠습니다.(아래 그림 참조)&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/img/sensorfusion/Digital_Image.jpg&quot; width=&quot;50%&quot; height=&quot;50%&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;coordinate-system으로-변환&quot;&gt;Coordinate System으로 변환&lt;/h4&gt;
&lt;p&gt;Camera Center Position $O$는 axes $i, j, k$로 표현할 수 있으며, $k$는 image plane으로의 방향을 나타냅니다. Position $C^{‘}$은 k가 image plane과 교차하는 지점으로 이미지 좌표의 중심을 나타내는 principal point 혹은 center point입니다. 우선 Point $P$를 image plane에 projection시키기 위해 center point $O$에서 Point $P$를 빼서 image plane에 맺히는 Point $\overrightarrow{P}$를 계산할 수 있습니다.(image plane의 좌측 코너) 이 때, image plane에 맺히는 $\overrightarrow{P}$는 $\begin{bmatrix} P_{x} &amp;amp; P_{y} &amp;amp; P_{z} \end{bmatrix}$  로 표현할 수 있습니다. 다음은 transformation process로 미터로 계산한 $\overrightarrow{P}$를 pixel 좌표로 이동시키는 것입니다. 이 때 우리는 아래 투영 방정식을 통해 얻을 수 있는 $k$와 $l$ 파라미터를 사용하여 meters를 pixel로 변환할 수 있습니다.($l, k$는 추후에 mapping operation을 할 때 필요한 calibration matrix에 중요하게 사용됩니다.) 이 때, y좌표가 좌측 하단에 있는 것이 아닌 좌측 상단에 있는것을 꼭 기억해야 합니다. &lt;br /&gt;
$ (1)\qquad \overrightarrow{P} \rightarrow \overrightarrow{P^{‘}}$ &lt;br /&gt;
$ (2)\qquad \begin{pmatrix} x, &amp;amp; y, &amp;amp; z \end{pmatrix}^{T} \rightarrow ( \underbrace{f \cdot k}_{\alpha} \cdot \frac{x}{z} +c_x$, $\underbrace{f \cdot l}_{\beta}\cdot\frac{y}{z} + c_{y} )^{T}$ &lt;br /&gt;
$ [k,l] = pixels/m $ \&lt;/p&gt;

&lt;p&gt;일반적으로 이와 같은 rectification으로 m를 픽셀로 변환할 때, 정확하게 discrete한 pixel에 일치하지 않습니다. 이러한 점을 보완하기 위해 interpolation을 사용하는데 이러한 interpolation errors를 피하기 위해서 원본 이미지를 사용하는 것은 합리적입니다. feature tracking과 같은 task에서 origin image를 사용하고 rectification을 적용하는 것이 의미 있습니다. 하지만 deep learning을 사용하는 경우는 distortion이 detection error를 가져올 수 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;image-and-bayer-pattern&quot;&gt;Image and Bayer Pattern&lt;/h3&gt;
&lt;p&gt;이번장에서는 빛 광선이 어떤 파장을 가지고 digitally하게 저장되는 Color Pixel로 변환되는지에 대해서 배우도록 하겠습니다. &lt;br /&gt;
Camera로 이미지를 촬영하면, 빛이 렌즈를 통과하여 이미지 센서에 도달합니다. 이 센서는 얼마나 많은 빛이 들어오는지 등록하는 light sensitive elements로 구성되어있고 그것을 상응하는 electron(..?)의 수로 변경해줍니다.(More Light, More Electron) 일정 노출 시간(Exposure time)이 완료되면, 이 생성된 전자들은 전압으로 변환되며, 최종적으로 A/D-Converter를 통해 이산 숫자로 변환됩니다. 이미지 기술에는 현재 CCD, CMOS 2가지 기술이 주로 사용되고 있습니다. 두 기술 모두 전자를 Voltage(전압)으로 변경시켜주지만 다른 전자를 생성하는 파장을 구분하지 못하는 색맹입니다. 그래서 Color Vision을 하기 위해서 Pixel앞에 특정 파장만을 허용하는 작은 filter elements(also micro-lenses)를 사용합니다. 파장을 색상에 매핑시키는 가장 일반적인 방법은 기본 원색이 개별적으로 통과할 수 있도록 RGB 패턴으로 필터 요소를 배열 하는 것입니다. 이러한 RGB 값들의 색 조합을 사용하면 사람이 볼 수 있는 대부분의 색깔을 만들어 낼 수 있습니다. 또 각 색상을 8비트(0~255까지 256개의 값)로 코딩하면 256&lt;em&gt;256&lt;/em&gt;256=1670만 가지 색상을 생성할 수 있습니다. \&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&quot;bayer-pattern&quot;&gt;Bayer Pattern&lt;/h4&gt;
&lt;p&gt;가장 보편적으로 RGB 패턴을 정렬시키는 방법을 Bayer Pattern이라 부릅니다. 만약 2500 x 2000 = 5백만 화소의 이미지를 가지고 있다면 R, G, B 색을 감지할 수 있는 화소가 5백만개 포함된 이미지 센서를 사용하는 것입니다. 그런데 이 때 각 화소가 RGB를 파악하는 것이 아닌 흑백의 밝기만을 감지하는 monochrome 화소이면 데이터 전송량을 엄청나게 줄일 수 있습니다. 이 때, 인간의 시각 특성에 따라서 G가 50% R, B가 25씩 되도록 아래 그림과 같이 교차 배치하는 방식을 Bayer Pattern이라 합니다.&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;/assets/img/sensorfusion/Bayer_Pattern_Filter.jpg&quot; width=&quot;70%&quot; height=&quot;70%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&quot;ccdcharge-coupled-device&quot;&gt;CCD(Charge-Coupled Device)&lt;/h4&gt;
&lt;p&gt;CCD 센서는 각 그림에서 수집된 전자들이 단일 또는 소수의 출력 노드를 통해 칩에서 전송됩니다. 그 이후 전하가 전압으로 변경되고 버퍼링 되어 아날로그 신호로 전송됩니다. 그 이후 신호가 증폭되고 센서 외부의 A/D 변환기를 통해 discrete한 숫자로 변환됩니다. CCD 센서는 CMOS에 비해 높은 감광도와 적은 노이즈를 가지고 있었지만 오늘날은 그 차이가 많이 줄어 들었습니다. 반면에 CCD는 높은 생산 가격과 높은 전력소비를 하는 단점을 가지고 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&quot;cmoscomplementary-metal-oxide-semiconductor&quot;&gt;CMOS(Complementary Metal-oxide Semiconductor)&lt;/h4&gt;
&lt;p&gt;CMOS 센서는 반도체 소자를 이용해 빛의 세기를 측정합니다. 반도체라는 것은 전압을 걸지 않으면 부도체, 전압을 걸면 전기가 흐르는 도체가 되는데 이를 사용하여 측정값을 한번에 병렬로 읽는 방식입니다. 또한 병렬로 읽기 때문에 CCD와 달리 빛의 세기를 측정하는 회로 장치가 셀 마다 전부 존재합니다. 이러한 특징 때문에 소비 전력이 작고, 고속 처리가 가능한 장점을 가지고 있습니다. 단점은 CMOS센서는 회로가 가지고 있는 (재질적, 공정적, 물리적)편차를 가지고 있기 때문에 전위를 측정하는 방식이 동일하지 않기 때문에 낮은 감도를 가지고 있습니다. 또한 암 전류가 잔존하여 노이즈가 많이 발생할 수 있는 단점을 가지고 있습니다. 하지만 오늘날 기술들이 비약적으로 발전하면서 이러한 문제를 많이 해결하였고 요즘은 CMOS를 대부분 사용하는 추세입니다.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;&lt;iframe width=&quot;720&quot; height=&quot;405&quot; src=&quot;https://www.youtube.com/embed/nxUDHcZl1uo&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;h3 id=&quot;단어&quot;&gt;단어&lt;/h3&gt;
&lt;p&gt;Gleaned : 얻은, 수집된 &lt;br /&gt;
Glean : 얻다 수집하다 &lt;br /&gt;
Embark : 배에 승선하다 &lt;br /&gt;
Embork : 시동을 걸다 &lt;br /&gt;
Contraption : 기구 장치 &lt;br /&gt;
Matured : 다 큰, 분별 있는 &lt;br /&gt;
Profoundly : 깊이 &lt;br /&gt;
Adverse : 불리한 부정적인 &lt;br /&gt;
Preceding : 선행의 &lt;br /&gt;
Fierce : 사나운 &lt;br /&gt;
Debate : 토론 논쟁 &lt;br /&gt;
Unattractive : 매력 없는 &lt;br /&gt;
Emanating : 방출 중 &lt;br /&gt;
Superimposed : 겹친 &lt;br /&gt;
Aperture : 구멍 &lt;br /&gt;
Photosensitive : 감광성 &lt;br /&gt;
Decent : 적절한 &lt;br /&gt;
Emanate : 발하다 &lt;br /&gt;
Aperture : 구멍, 개구부 &lt;br /&gt;
Refract : 굴절시키다 &lt;br /&gt;
Such that : 그런식으로 &lt;br /&gt;
Concentric : 중심이 같은 &lt;br /&gt;
Magnification : 확대 &lt;br /&gt;
Mitigate : 완화하다 &lt;br /&gt;
Along with : ~와 함께 &lt;br /&gt;
Along : ~를 따라 &lt;br /&gt;
Advisible : 권고할만한, 가치있는 &lt;br /&gt;
Electrons : 전자&lt;/p&gt;
</description>
        <pubDate>Thu, 12 Jan 2023 00:00:00 +0900</pubDate>
        <link>http://localhost:4000//2023/01/Camera_01.html</link>
        <guid isPermaLink="true">http://localhost:4000//2023/01/Camera_01.html</guid>
        
        
        <category>sensorfusion</category>
        
      </item>
    
  </channel>
</rss>
