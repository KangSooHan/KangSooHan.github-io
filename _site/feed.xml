<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Whale - Jekyll</title>
    <description></description>
    <link>http://localhost:4000//</link>
    <atom:link href="http://localhost:4000//feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Mon, 06 Feb 2023 14:14:12 +0900</pubDate>
    <lastBuildDate>Mon, 06 Feb 2023 14:14:12 +0900</lastBuildDate>
    <generator>Jekyll v4.3.1</generator>
    
      <item>
        <title>Trie</title>
        <description>&lt;h2 id=&quot;trie란&quot;&gt;Trie란?&lt;/h2&gt;
&lt;p&gt;트라이는 문자열의 집합을 표현하는 Tree로 정보검색의(Re”trie”val)에서 이름을 따 왔습니다. 같은 노드에서 나오는 간선들은 같은 라벨을 갖지 않습니다. 루트에서 단말 노드까지 이른 경로는 하나의 문자열을 의미합니다.&lt;/p&gt;

&lt;h3 id=&quot;접미사-trie&quot;&gt;접미사 Trie&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;/assets/img/algorithm/Suffix_Trie.jpg&quot; width=&quot;30%&quot; height=&quot;30%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;접미사 트라이를 이용하면 다음과 같은 장점을 가질 수 있습니다.&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;부분 문자열 검사
    &lt;ul&gt;
      &lt;li&gt;주어진 문자를 가지고 노드를 따라가며 확인&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;두개 접두사의 최장 공통 접두어 찾기
    &lt;ul&gt;
      &lt;li&gt;두개의 노드의 공통 조상을 찾기&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;사전적 순서로 정렬된 K번째 접미사 찾기
    &lt;ul&gt;
      &lt;li&gt;DFS를 사용하면 사전적 순서로 확인 가능&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Compressed Trie
    &lt;ul&gt;
      &lt;li&gt;간선이 분할되지 않고 하나인 경우 Node를 하나로 합칠 수 있음&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;
&lt;a href=&quot;https://github.com/KangSooHan/algorithm/blob/main/SWExpert/TRIE/1256/main.cpp&quot;&gt;k번째 접미사 Code&lt;/a&gt;
&lt;a href=&quot;https://github.com/KangSooHan/algorithm/blob/main/SWExpert/TRIE/1257/main.cpp&quot;&gt;k번째 문자열 Code&lt;/a&gt;&lt;/p&gt;

</description>
        <pubDate>Fri, 03 Feb 2023 00:00:00 +0900</pubDate>
        <link>http://localhost:4000//2023/02/Trie.html</link>
        <guid isPermaLink="true">http://localhost:4000//2023/02/Trie.html</guid>
        
        
        <category>algorithm</category>
        
      </item>
    
      <item>
        <title>Sort</title>
        <description>&lt;h2 id=&quot;sort-종류&quot;&gt;Sort 종류&lt;/h2&gt;
&lt;p&gt;이번 시간에는 지금까지 조각조각 나눠져서 다뤄온 Sort에 대해서 한번에 모아 리뷰해보도록 하겠습니다.&lt;/p&gt;

</description>
        <pubDate>Thu, 02 Feb 2023 00:00:00 +0900</pubDate>
        <link>http://localhost:4000//2023/02/Sort.html</link>
        <guid isPermaLink="true">http://localhost:4000//2023/02/Sort.html</guid>
        
        
        <category>algorithm</category>
        
      </item>
    
      <item>
        <title>Greedy</title>
        <description>&lt;h2 id=&quot;greedy-algorithm이란&quot;&gt;Greedy Algorithm이란?&lt;/h2&gt;
&lt;p&gt;탐욕 알고리즘은 최적해를 구하는데 사용되는 근시안적인 방법입니다. 여러 경우 중 하나를 선택할 때마다 그 순간이 최적인 것을 선택해 나가는 방식으로 진행합니다. 각 선택 시점에서 이루어지는 결정은 지역적으로 최적이지만 이렇게 최적해를 만들었다고 꼭 결과적으로 최적이라는 보장은 없습니다. 하지만 이것이 보장되는 케이스도 존재합니다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;h2 id=&quot;해결하지-못하는-경우&quot;&gt;해결하지 못하는 경우&lt;/h2&gt;
&lt;h3 id=&quot;동전-갯수-줄이기&quot;&gt;동전 갯수 줄이기&lt;/h3&gt;
&lt;p&gt;Greedy Algorithm으로 계산하는 동전의 개수를 결정할 때 500, 100, 50, 10원 짜리 동전만 있다면 성공적으로 해결할 수 있습니다.(500은 100, 50, 10의 100은 50, 10의 50은 10의 배수임으로 보장되어 있음) . 하지만 500, 400, 100, 50, 10원짜리 동전이 있다면 800원을 계산할 때 Greedy로 해결할 수 없습니다.(800원 -&amp;gt; 500+100+100+100 / 400+400)&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;배낭-짐싸기knapsack&quot;&gt;배낭 짐싸기(Knapsack)&lt;/h3&gt;
&lt;p&gt;Greedy Algorithm을 사용하여 무게, 값, 무게 당 값이 높은 순서로 물건을 채울수 있습니다. 하지만 이 방법으로 진행하면 최적의 해가 보장되지 않습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/algorithm/Greedy_Knapsack.jpg&quot; width=&quot;30%&quot; height=&quot;30%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;30kg를 무게 당 값을 기준으로 채운다고 한다면.. 성공할 수 없습니다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;h2 id=&quot;그러면-대체-어디에쓰여&quot;&gt;그러면 대체 어디에쓰여..?&lt;/h2&gt;
&lt;h3 id=&quot;회의실-배정하기활동-선택-문제&quot;&gt;회의실 배정하기(활동 선택 문제)&lt;/h3&gt;
&lt;p&gt;A회사 개발팀이 회의실 사용 신청을 처리하는 업무를 진행하려고 합니다. 이 때 사용 가능한 회의실은 하나만 존재하고 다수의 회의가 신청이 되어있습니다. 회의는 시작 시간과 종료 시간이 있으며 회의는 동시에 열릴 수 없습니다. 이 때 최대 몇 개의 회의를 배정할 수 있을까요?&lt;/p&gt;

&lt;h4 id=&quot;탐욕-기법의-적용&quot;&gt;탐욕 기법의 적용&lt;/h4&gt;
&lt;ol&gt;
  &lt;li&gt;회의 목록 S에서 가장 일찍 끝나는 회의 $s_{min}$를 선택&lt;/li&gt;
  &lt;li&gt;$s_{min}$과 겹치는 모든 회의를 S에서 삭제&lt;/li&gt;
  &lt;li&gt;S에 회의가 모두 없어질 때까지 1번부터 반복&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;proof&quot;&gt;Proof&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;탐욕적 선택이 항상 최적해로 가는 길 중에 하나입니다.&lt;/li&gt;
  &lt;li&gt;즉, 가장 종료 시간이 빠른 회의를 포함하는 최적의 해가 반드시 존재합니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/KangSooHan/algorithm/blob/main/SWExpert/GREEDY/%ED%9A%8C%EC%9D%98%EC%8B%A4%EB%B0%B0%EC%A0%95/main.cpp&quot;&gt; 코드&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Thu, 02 Feb 2023 00:00:00 +0900</pubDate>
        <link>http://localhost:4000//2023/02/Greedy.html</link>
        <guid isPermaLink="true">http://localhost:4000//2023/02/Greedy.html</guid>
        
        
        <category>algorithm</category>
        
      </item>
    
      <item>
        <title>분할정복(Devide &amp; Conquer)</title>
        <description>&lt;h2 id=&quot;분할-정복&quot;&gt;분할 정복&lt;/h2&gt;
&lt;p&gt;분할 정복은 해결해야 하는 문제를 분할(Divide)하고 여러개의 작은 부분으로 나눈 뒤 이 부분을 정복(Conquer)하여 해결하고 마지막으로 통합(Combine)하는 알고리즘입니다.&lt;/p&gt;

&lt;h2&gt;&lt;br /&gt;&lt;/h2&gt;
&lt;h3 id=&quot;가짜-동전-찾기&quot;&gt;가짜 동전 찾기&lt;/h3&gt;
&lt;p&gt;n개의 동전들 중에 가짜 동전이 하나 포함되어 있다. 이 때 양팔 저울을 최소로 사용해서 가짜 동전을 찾는 방법은?&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;23&lt;/li&gt;
  &lt;li&gt;11 &amp;amp; 11 &amp;amp; 1(만일 11과 11이 같다면 1에 가짜 동전 다르다면 작은 쪽에 가짜 동전)&lt;/li&gt;
  &lt;li&gt;5 &amp;amp; 5 &amp;amp; 1&lt;/li&gt;
  &lt;li&gt;2 &amp;amp; 2 &amp;amp; 1&lt;/li&gt;
  &lt;li&gt;1 &amp;amp; 1 (마지막을 비교함으로써 어떤 동전이 가짜인지 확인 가능)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;거듭-제곱&quot;&gt;거듭 제곱&lt;/h3&gt;
&lt;p&gt;거듭제곱의 값을 구하는 방법은?&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;25승&lt;/li&gt;
  &lt;li&gt;12승 * 13승 $\rightarrow$ 12승 * 12승 *X 25승&lt;/li&gt;
  &lt;li&gt;6승 * 6승 $\rightarrow$ 12승&lt;/li&gt;
  &lt;li&gt;3승 * 3승 $\rightarrow$ 6승&lt;/li&gt;
  &lt;li&gt;2승 * 1승 $\rightarrow$ 3승&lt;/li&gt;
  &lt;li&gt;1승 * 1승 $\rightarrow$ 2승&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;merge-sort&quot;&gt;Merge Sort&lt;/h3&gt;
&lt;p&gt;병합정렬은 여러 개의 정렬된 자료의 집합을 병합하여 한 개의 정렬된 집합으로 만드는 정렬 방식입니다. 분할 정복 알고리즘을 활용한 정렬 방식으로 시간 복잡도는 O(nlogn)입니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/algorithm/Merge_Sort.jpg&quot; width=&quot;50%&quot; height=&quot;50%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;quick-sort&quot;&gt;Quick Sort&lt;/h3&gt;
&lt;p&gt;퀵정렬은 병합 정렬처럼 배열을 두개로 분할하고 각각 정렬하는 방법이지만 병합을 진행하지는 않습니다. 퀵정렬의 아이디어는 피봇(P)값들 보다 큰 값을 오른쪽, 작은 값을 왼쪽 집합에 위치하도록 합니다. 그러면 pivot은 정렬된 위치임을 보장받을 수 있습니다. 그 이후 피봇의 왼쪽과, 오른쪽을 나눠서 다시 피봇을 기준으로 정렬합니다. 이를 반복하면 모든 피봇들이 정렬된 위치를 보장받는 정렬된 상태가 될 수 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/algorithm/Quick_Sort.jpg&quot; width=&quot;30%&quot; height=&quot;30%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;이진-탐색binary-search&quot;&gt;이진 탐색(Binary Search)&lt;/h3&gt;
&lt;p&gt;이진탐색은 자료의 가운데에 있는 항목의 키 값과 비교하여 다음 탐색의 위치를 결정하고 탐색을 계속 진행하는 방식입니다. 꼭 정렬이 되어 있어야 합니다.&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;자료의 중앙에 있는 원소&lt;/li&gt;
  &lt;li&gt;중앙 원소의 값과 찾고자 하는 목표 값을 비교&lt;/li&gt;
  &lt;li&gt;
    &lt;ul&gt;
      &lt;li&gt;목표 값이 중앙 원소보다 작으면 왼쪽 새로 탐색&lt;/li&gt;
      &lt;li&gt;목표 값이 중앙 원소보다 크면 오른쪽 새로 탐색&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;찾고자 하는 값을 찾을때까지 반복&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/algorithm/Binary_Search.jpg&quot; width=&quot;30%&quot; height=&quot;30%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;binary-search를-이용한-최근접-점의-쌍-찾기-알고리즘closest-pair-of-points&quot;&gt;Binary Search를 이용한 최근접 점의 쌍 찾기 알고리즘(Closest Pair of Points)&lt;/h3&gt;
&lt;p&gt;최근접 점의 쌍(Closest Pair)를 찾는 문제는 2차원 평면에서 N개의 점이 있을 때, 거리가 가장 가까운 한 쌍의 점을 찾는 문제입니다. 이 문제도 DAC로 해결할 수 있습니다.&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;평면을 L과 R집합으로 나눕니다.&lt;/li&gt;
  &lt;li&gt;만일 L혹은 R집합이 2개보다 작다면(3개 이하일 때는 직접 계산이 빠르긴 합니다.) 최근접 쌍으로 return해줍니다.&lt;/li&gt;
  &lt;li&gt;L과 R로 통합할 때, L과 R사이에 있는 점들을 유의해야 합니다.(L과 R사이에 있는 점이 최근접 쌍이 될 수 있습니다.)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/algorithm/Closest_Pair.jpg&quot; width=&quot;20%&quot; height=&quot;20%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/algorithm/Closest_Pair_DAC.jpg&quot; width=&quot;30%&quot; height=&quot;30%&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Thu, 02 Feb 2023 00:00:00 +0900</pubDate>
        <link>http://localhost:4000//2023/02/DAC.html</link>
        <guid isPermaLink="true">http://localhost:4000//2023/02/DAC.html</guid>
        
        
        <category>algorithm</category>
        
      </item>
    
      <item>
        <title>HASH</title>
        <description>&lt;h2 id=&quot;hash란&quot;&gt;HASH란?&lt;/h2&gt;
&lt;p&gt;대부분의 파일 시스템을 생각해보면 파일 시스템의 다수의 디렉토리 안에 대량의 파일들이 존재할 수 있습니다. 이 때, 디렉토리의 경로를 따라가거나, 존재하는 파일을 나열하는 등의 작업을 수행하면 엄청나게 오랜 시간이 걸릴 수 있습니다. 이런 검색과 같은 기능에서 사용하는 알고리즘이 해싱입니다. 해싱은 특정 항목 검색 시, 탐색 키에 대한 산술적 연산으로 키가 있는 위치를 계산하여 바로 찾아가는 방법입니다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;직접 번지 테이블(배열)
    &lt;ul&gt;
      &lt;li&gt;자료를 직접 번지 테이블에 저장하는 방법&lt;/li&gt;
      &lt;li&gt;전체 key들의 집합이 작은 경우 효율적&lt;/li&gt;
      &lt;li&gt;키값이 클 때, Memory가 너무 커지는 단점&lt;/li&gt;
      &lt;li&gt;메모리 공간 낭비&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;해시 테이블
    &lt;ul&gt;
      &lt;li&gt;집합에 비해 실제 key 집합이 작을 때 사용&lt;/li&gt;
      &lt;li&gt;메모리 공간이 적게 필요하여 메모리 효율적 사용&lt;/li&gt;
      &lt;li&gt;따라서 이런 key값 자료를 저장할 위치를 계산하는 해시 함수(H)를 사용하여 H(k)위치에 저장&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/algorithm/Hash_Table.jpg&quot; width=&quot;40%&quot; height=&quot;40%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Value : 저장하고자 하는 정보. 최종적으로 bucket에 hash와 매칭되어 저장&lt;/li&gt;
  &lt;li&gt;key : 고유한 값. Hash function의 입력 값. Key값 그대로 최종 bucket에 저장&lt;/li&gt;
  &lt;li&gt;Hash Function : Key를 수학적 방법으로 고정된 길이의 hash로 변경.(서로 다른 key가 동일한 hash일 수 있습니다.)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;hash-function---djb2&quot;&gt;Hash Function - djb2&lt;/h3&gt;
&lt;p&gt;djb2는 문자열의 hash 함수 중 간략하면서도 무작위 분포를 만드는데 뛰어나다고 알려져 있습니다. magic number 5381과 33을 활용하여 hask key를 생성합니다.&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;djb2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hash&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5381&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;hash&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hash&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hashF&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hash&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5381&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 자주 쓰이는 1007, 20011, 30011, 40009, 100003, 200003 등의 소수가 있음&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hash&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5381&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위와 같은 방식으로 Hash Table을 소수로 할 수 있지만 느린 % 연산을 사용해야 합니다. 이에 반해 2의 거듭제곱을 활용할 경우 bit masking을 통해 나머지를 빠르게 계산할 수 있지만 많은 충돌이 발생할 수도 있게 됩니다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;h3 id=&quot;충돌collision&quot;&gt;충돌(Collision)&lt;/h3&gt;
&lt;p&gt;이렇게 다른 서로 다른 키 값에 해시 함수를 적용하면 반환된 Hash 값이 동일한 경우가 발생합니다. 이 경우를 충돌(Collision)이라 부릅니다. 더 큰 집합에서 작은 집합으로 만드는 Hash의 경우 충돌을 불가피하게 발생합니다. 아래 두가지 방법은 이러한 충돌 문제를 해결하는 방법입니다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;체이닝(Chaining) : 체이닝은 해시 테이블의 구조를 변경하여 하나의 버킷에 여러개의 키 값이 저장될 수 있도록 연결 리스트를 사용하는 방법&lt;/li&gt;
  &lt;li&gt;개방 주소법(Open Addressing) : 해시 함수로 구한 주소에 빈 공간이 없어 충돌이 발생하면 그 다음 위치에 빈 공간이 있는지 조사하는 방법&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;
&lt;a href=&quot;https://github.com/KangSooHan/algorithm/blob/main/DataStructure/HASH/main.cpp&quot;&gt;HASH 구현&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Wed, 01 Feb 2023 00:00:00 +0900</pubDate>
        <link>http://localhost:4000//2023/02/HASH.html</link>
        <guid isPermaLink="true">http://localhost:4000//2023/02/HASH.html</guid>
        
        
        <category>algorithm</category>
        
      </item>
    
      <item>
        <title>GIT!</title>
        <description>&lt;h2 id=&quot;git-이란&quot;&gt;GIT 이란?&lt;/h2&gt;
&lt;p&gt;간단하게 생각하면 버전 관리 시스템입니다. 이전에 저희가 파일을 수정하고 저장할 떄 report.ppt, final_report.ppt, final_final_report.ppt 와 같이 버전 관리를 하였습니다.(어떤게 파이널이야 대체!?) Version Control System은 여러가지의 역할과 의미를 가지고 있습니다. 그 중에서 저희가 꼭 기억해야 하는 것은 file의 이름을 더럽히지 않고 report.ppt만을 유지하면서 버전 관리를 할 수 있습니다.(Backup, Recovery, Collaboration이 가능한건 안비밀) \&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;git-init&quot;&gt;git init&lt;/h3&gt;
&lt;p&gt;git init은 내가 현재  디렉토리에서 작업을 진행하겠다 선언해주는 명령어입니다. git init을 실행하면 ./.git이라는 폴더가 생성되고 그 안에 버전 정보들이 저장됩니다.&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git init
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;git-status&quot;&gt;git status&lt;/h3&gt;
&lt;p&gt;git status는 현재 git에 대한 정보들이 나옵니다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;“Untracked files:”는 아직 git이 추적하지 않은 파일들을 의미합니다.&lt;/li&gt;
  &lt;li&gt;“Changes not staged for commit: “ 파일은 추적되었지만 변경이 추적되지 않은 파일들을 의미합니다.&lt;/li&gt;
  &lt;li&gt;“Changes to be committed:”는 git이 추적을 시작하였지만 버전을 생성하지 않은 파일들을 의미합니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;&lt;br /&gt;&lt;/h2&gt;

&lt;h3 id=&quot;git-add&quot;&gt;git add&lt;/h3&gt;
&lt;p&gt;git add는 추적하지 않은 파일들에 대하여 git이 추적할 수 있도록 파일을 추가해주는 명령어입니다. git add를 진행하면 git status의 상태가 Untracked files에서 Changes to be committed로 변경됩니다.(tracking 시작)&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git add &amp;lt;파일이름&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;
&lt;h3 id=&quot;git-stage-area&quot;&gt;git stage area&lt;/h3&gt;
&lt;p&gt;git add를 사용하면 commit 대기 상태로 넘어가게 됩니다. 이 commit 대기 상태를 stage area라 부릅니다. 위에 표현으로는 추적된 파일들을 stage area에 있다고 생각하시면 될 것 같습니다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;h3 id=&quot;git-commit&quot;&gt;git commit&lt;/h3&gt;
&lt;p&gt;git commit은 현재 추적하고 있는 파일들의 버전 정보를 생성할 수 있는 명령어입니다.&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 저는 git commit 실행 후 내용을 수정하기보다 -m 명령어를 붙여 사용하는 것을 선호합니다.&lt;/span&gt;
git commit &lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;버전 이름&quot;&lt;/span&gt; 
&lt;span class=&quot;c&quot;&gt;# git commit -a 는 이미 추가되있는 파일에 한해서 add를 실행하는 명령어입니다.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;h3 id=&quot;git-repository&quot;&gt;git repository&lt;/h3&gt;
&lt;p&gt;이렇게 commit을 해서 생성한 버전 파일들을 저장하는 곳이 git repository입니다. stage와는 명백하게 다르기 때문에 유의하시기 바랍니다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;h3 id=&quot;git-log&quot;&gt;git log&lt;/h3&gt;
&lt;p&gt;git log는 commit을 통해 만든 버전들을 볼 수 있는 명령어입니다.&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git log
&lt;span class=&quot;c&quot;&gt;# -p 인자를 주게되면 각 버전 사이의  diff를 확인할 수 있습니다.&lt;/span&gt;
git log &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;h3 id=&quot;git-diff&quot;&gt;git diff&lt;/h3&gt;
&lt;p&gt;git diff는 git log -p의 명령어를 치면 생성되었던 diff를 표시해주는 명령어입니다.&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#git diff만 입력할 경우 현재와 그 이전의 차이를 보여줍니다.&lt;/span&gt;
git diff
&lt;span class=&quot;c&quot;&gt;# commit id끼리의 차이점을 보여줍니다.&lt;/span&gt;
git diff &amp;lt;src_commit &lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;..&amp;lt;tgt_commit &lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;h2 id=&quot;git-branch&quot;&gt;git branch&lt;/h2&gt;
&lt;p&gt;git branch는 나무의 가지처럼 하나의 뿌리에서 다른 뿌리로 뻗어나가는 것과 같이 다른 버전들이 여러개 있는 것을 의미합니다.(다양한 사용자들이 하나의 작업을 진행한다면) 그래서 branch는 작업을 진행하다가 필요에 의해서 작업이 분기되는 현상입니다. branch는 가지고 있는 소스 코드를 좀더 customize할 때 사용할 때, 협업할 때, Server에 반영할 때 등 다양하게 사용할 수 있습니다.&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 기본 git init후 branch를 사용하면 master가 생성됩니다.&lt;/span&gt;
git branch
&lt;span class=&quot;c&quot;&gt;# git branch를 사용하여 exp1을 생성합니다.(이 때까지 작업한 log들은 동일하게 생성됩니다.)&lt;/span&gt;
git branch exp1
&lt;span class=&quot;c&quot;&gt;# checkout을 하면 현재 branch에서 checkout하고 exp1 branch로 접근합니다.&lt;/span&gt;
git checkout exp1
&lt;span class=&quot;c&quot;&gt;# master와 branch 사이의 차이를 확인하고 싶다면 branches&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# decorate를 적용하면 branch와 master의 마지막 commit을 확인할 수 있음. Head는 git branch의 현재 checkout &lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# graph명령어는 git log에 가지가 보임&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# oneline명령어는 한줄로 깔끔하게 그래프를 확인할 수 있음&lt;/span&gt;
git log &lt;span class=&quot;nt&quot;&gt;--branches&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--decorate&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--graph&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--oneline&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# master와 branch의 차이를 보고 싶으면(마지막 master가 아닌 분기점 master와의 차이)&lt;/span&gt;
git log master..exp1
&lt;span class=&quot;c&quot;&gt;# diff로도 차이를 확인할 수 있음(마지막 master와 마지막 branch와의 차이)&lt;/span&gt;
git diff master..exp1
&lt;span class=&quot;c&quot;&gt;# exp1=&amp;gt; master(*) master에서 merge명령어&lt;/span&gt;
git merge exp1
&lt;span class=&quot;c&quot;&gt;# exp작업이 끝났으니 삭제! -d 옵션&lt;/span&gt;
git branch &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; exp1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Tue, 31 Jan 2023 00:00:00 +0900</pubDate>
        <link>http://localhost:4000//2023/01/git.html</link>
        <guid isPermaLink="true">http://localhost:4000//2023/01/git.html</guid>
        
        
        <category>etc</category>
        
      </item>
    
      <item>
        <title>Heap</title>
        <description>&lt;h2 id=&quot;heap이란&quot;&gt;Heap이란?&lt;/h2&gt;
&lt;p&gt;Heap은 Complete Binary Tree에 있는 노드 중에서 키 값이 가장 큰 노드나 가장 작은 노드를 찾기 위해 만든 자료구조입니다. Binary Tree와의 가장 큰 차이는 Heap은 부모 노드를 따라서 정렬이 됩니다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;삽입-연산&quot;&gt;삽입 연산&lt;/h3&gt;
&lt;p&gt;Heap의 삽입 연산은 맨 마지막 leaf 노드에 데이터를 삽입하고, 힙 구조를 유지하기 위해서 부모 노드와 값을 바꾸워 주면서 루트 노드까지 올라갑니다. 힙의 삽입은 거품이 올라가는 모양과 유사하여 Bubble Up이라고도 합니다.&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;/assets/img/algorithm/Heap_Insert.jpg&quot; width=&quot;50%&quot; height=&quot;50%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;삭제-연산&quot;&gt;삭제 연산&lt;/h3&gt;
&lt;p&gt;Heap에서는 루트 노드의 원소만을 삭제할 수 있습니다. 힙 구조를 유지하면서 루트 노드를 삭제하기 위해서는 마지막 노드를 루트 노드의 위치로 이동 시킨 후, 자식 노드와 비교하면서 위치를 찾아 내려가면 힙 구조를 유지하면서 삭제 연산을 진행할 수 있습니다.&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;/assets/img/algorithm/Heap_Remove.jpg&quot; width=&quot;50%&quot; height=&quot;50%&quot; /&gt;&lt;/p&gt;

</description>
        <pubDate>Sat, 28 Jan 2023 00:00:00 +0900</pubDate>
        <link>http://localhost:4000//2023/01/Heap.html</link>
        <guid isPermaLink="true">http://localhost:4000//2023/01/Heap.html</guid>
        
        
        <category>algorithm</category>
        
      </item>
    
      <item>
        <title>DP</title>
        <description>&lt;h2 id=&quot;dpdynamic-programming이란&quot;&gt;DP(Dynamic Programming)이란?&lt;/h2&gt;
&lt;p&gt;DP는 완전 탐색을 하는데 좀 더 스마트하게 하는 방법입니다. DP는 기본적으로 Recursive한 방법 + Memoization을 통해서 문제를 푸는 방법입니다. 특히 DP는 점화식으로 표현할 수 있다는 강점을 가지고 있습니다. 기본적으로 DP알고리즘은 최적화 문제를 해결하는 알고리즘입니다. 최적화 알고리즘은 최적의 값을 구하는 문제 입니다. DP는 작은 부분 문제들의 해들을 구하고 이를 이용하여 큰 크기의 부분 문제들을 해결하는 알고리즘 기법입니다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;h3 id=&quot;dp시작하기&quot;&gt;DP시작하기&lt;/h3&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;토끼-수-구하기&quot;&gt;토끼 수 구하기&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;첫 달에는 새로 태어난 토끼 한 쌍만이 존재한다.&lt;/li&gt;
  &lt;li&gt;두 달 이상 된 토끼는 번식이 가능하다.&lt;/li&gt;
  &lt;li&gt;번식 가능한 토끼 한 쌍은 매달 새끼 한 쌍을 낳는다.&lt;/li&gt;
  &lt;li&gt;토끼는 죽지 않는다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;N번째 달의 토끼 수는? &lt;br /&gt;
f(n) : time n에서 토끼의 수 &lt;br /&gt;
n번째 달 f(n)을 a  n+1번째 달 f(n+1)을 b라 하면 n+2번째 달 f(n+2)는 a+b가 됩니다.&lt;br /&gt;
이를 점화식으로 표현하면 &lt;br /&gt;
$ f(n+2) = f(n+1) + f(n) ,\qquad f(1) = 1 , f(2) = 1 $ &lt;br /&gt;
이 됩니다.\&lt;/p&gt;

&lt;h4 id=&quot;이를-단순하게-중복-호출로만-해결한다면&quot;&gt;이를 단순하게 중복 호출로만 해결한다면!?&lt;/h4&gt;
&lt;p&gt;fib(3) = fib(2) + fib(1) &lt;br /&gt;
fib(4) = fib(3) + fib(2) = fib(2) + fib(1) + fib(2) &lt;br /&gt;
fib(5) = fib(4) + fib(3) = fib(3) + fib(2) + fib(2) + fib(1) + fib(2) = fib(2) + fib(1) + fib(2) + fib(2) + fib(2) + fib(1) + fib(2)&lt;br /&gt;
와 같이 엄청난 중복 호출이 발생하게 됩니다.&lt;/p&gt;

&lt;h4 id=&quot;수학적-귀납법을-통해-얼마나-중복되었는지-확인해보자&quot;&gt;수학적 귀납법을 통해 얼마나 중복되었는지 확인해보자!&lt;/h4&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&quot;수학적-귀납법&quot;&gt;수학적 귀납법&lt;/h4&gt;
&lt;p&gt;어떤 등식이 모든 N에 대해서 성립함을 보이기 위해서, 가능한 모든 N을 등식에 대입하여 증명할 수는 없습니다. 이 때 사용하는 것이 수학적 귀납법입니다.\&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;주어진 등식이 n=1 일 때 성립함을 증명하고, N일 때 성립한다고 가정한 후, N+1일 떄 성립함을 증명&lt;/li&gt;
  &lt;li&gt;그러면 도미노의 원리와 같이 1, 2, 3, … N 까지 모든 N에 대해서 성립&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
  &lt;li&gt;귀납 기본(Induction Base) : n=1(혹은 n=0)에 대해 등식이 성립함을 증명한다.&lt;/li&gt;
  &lt;li&gt;귀납 가정(Induction Hypothesis) : 임의의 n에 대해 등식이 성립한다고 가정한다,&lt;/li&gt;
  &lt;li&gt;귀납 단계(Induction Step) : 등식이 N+1에 대해서도 성립함을 증명한다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;$\rightarrow$ 적용해보면&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Induction Base : $T(2) = T(1) + T(0) + 1 = 3 &amp;gt; 2 = 2^{\frac{2}{2}}$ &lt;br /&gt;
$ T(3) = T(2) + T(1) + 1 = 5 &amp;gt; 2.83 \approx 2^{frac{3}{2}} $&lt;/li&gt;
  &lt;li&gt;Induction Hypothesis :
$2 \leq M &amp;lt; n$ 인 모든 m에 대해서 $T(m) &amp;gt; 2^{frac{m}{2}}$이라 가정&lt;/li&gt;
  &lt;li&gt;Induction Step : 
 $T(n)$ : fibo(n)을 계산하기 위하여 fibo 함수를 호출하는 횟수 &lt;br /&gt;
 $T(0)=1;$ &lt;br /&gt;
 $T(1) = 1;$ &lt;br /&gt;
 $T(n) = T(n-1) + T(n-2) + 1 \quad for \quad n \geq 2 $ &lt;br /&gt;
 $\qquad &amp;gt; 2 * T(n-2) \qquad \qquad since \quad T(n-1) &amp;gt; T(n-2) $ &lt;br /&gt;
 $\qquad &amp;gt; 2^2 * T(n-4) $ &lt;br /&gt;
 $\qquad &amp;gt; 2^3 * T(n-6) $ &lt;br /&gt;
 $\qquad … $ &lt;br /&gt;
 $\qquad &amp;gt; 2^{\frac{n}{2}} * T(0) $ &lt;br /&gt;
 $\qquad = 2^{\frac{n}{2}} $&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;비둘기-집의-원리pigeonholde-principle&quot;&gt;비둘기 집의 원리(pigeonholde principle)&lt;/h3&gt;
&lt;p&gt;비둘기 집의 원리는 N+1개의 물건을 N개의 상자에 넣을 때 적어도 어느 한 상자에는 두 개 이상의 비둘기가 들어 있다는 원리입니다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&quot;수학적-귀류법&quot;&gt;수학적 귀류법&lt;/h4&gt;
&lt;p&gt;수학적 귀류법은 우리가 가정한 것의 역에 대해서 사실임을 가정하고 그것이 모순됨을 증명하는 방법입니다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;n개의 비둘기 집과 n+1마리의 비둘기가 있다고 가정&lt;/li&gt;
  &lt;li&gt;만약 비둘기 집에 한 마리 이하의 비둘기만 들어 있다면, 전체 비둘기 집에는 많아야 n마리의 비둘기가 존재&lt;/li&gt;
  &lt;li&gt;그런데 비둘기는 n+1마리 임으로 이것은 모순 -&amp;gt; 따라서 적어도 어느 한 비둘기 집에는 두마리 이상의 비둘기가 존재&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;$\rightarrow$ 적용해보면&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;n번째의 피보나치수를 구하기 위해 알아야 할 값은 fibo(0) ~ fibo(n-1) : n개&lt;/li&gt;
  &lt;li&gt;재귀로 n번쨰의 피보나치수를 구할 경우 fibo(n) 함수를 $2^{\frac{n}{2}}$번 호출 &lt;br /&gt;
$2^{\frac{n}{2}} &amp;gt; n $&lt;/li&gt;
  &lt;li&gt;따라서 비둘기 집의 원리를 적용하면 중복해서 호출됨을 증명&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;연습문제-1&quot;&gt;연습문제 1&lt;/h3&gt;
&lt;p&gt;아파트를 각 층별로 파란색 또는 노란색 페인트로 칠하려고 합니다.\&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;노란색은 인접한 두 층에 연속해서 사용할 수 있다.&lt;/li&gt;
  &lt;li&gt;파란색은 인접한 두 층에 연속해서 사용할 수 없다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;이와 같은 규칙으로 N층의 아파트를 칠할 수 있는 방법의 수는 몇가지인가?\&lt;/p&gt;

&lt;p&gt;$Yellow[n] = Yellow[n-1] + Blue[n-1];$ &lt;br /&gt;
$Blue[n] = Yellow[n-1];$ &lt;br /&gt;
$Yellow[1] = 1, Blue[1] = 1;$&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;memozation&quot;&gt;Memozation&lt;/h3&gt;
&lt;p&gt;지금까지 우리는 재귀적 방법을 통해 2가지 문제를 풀어 봤습니다. 하지만 귀납법 및 귀류법으로 증명한 것처럼 지금까지 문제를 풀 때 동일한 함수를 중복적이게 호출하고 있습니다. 컴퓨터 프로그램을 실행할 때 이러한 문제를 해결하기 위해서 메모리에 값을 저장해서 매번 다시 계산하지 않도록 하여 전체적인 실행 속도를 빠르게 하는 기술을 Memoization이라고 합니다.&lt;br /&gt;
예를 들면, 피보나치 수열에서 fibo(3) = fibo(2) + fibo(1)을 저장해 둔다면 fibo(4) = fibo(3) + fibo(2)를 계산할 때, fibo(3)을 다시한번 계산할 필요가 없게 됩니다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;동적-계획법의-적용-요건&quot;&gt;동적 계획법의 적용 요건&lt;/h3&gt;
&lt;p&gt;지금까지 우리는 DP에 대해서 알아보았는데 이러한 동적 계획법을 적용하려면 2가지 조건이 있어야 합니다.&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;최적 부분문제 구조(Optimal Substructure) $\rightarrow$ Recursive
최적화의 원칙을 만족해야 함
최적화의 원칙 : 어떤 문제에 대한 해가 최적일 때, 그 해를 구성하는 작은 문제들의 해 역시 최적이어야 한다.&lt;/li&gt;
  &lt;li&gt;중복 부분문제 구조(Overlapping Subproblems) $\rightarrow$ Memoization&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;3단계-dp-적용-접근-방법&quot;&gt;3단계 DP 적용 접근 방법!&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;최적해 구조의 특성을 파악
문제를 부분 문제로 나눈다.&lt;/li&gt;
  &lt;li&gt;최적해의 값을 재귀적으로 정의
부분 문제의 최적해 값에 기반하여 문제의 최적해 값을 정의한다.&lt;/li&gt;
  &lt;li&gt;상향식 방법으로 최적해를 계산!
가장 작은 부분 문제의 해를 구한 뒤 테이블에 저장한다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;$\rightarrow$ 적용해보면&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;f(n-1) + f(n-2)&lt;/li&gt;
  &lt;li&gt;f(n) = f(n-1) + f(n-2)&lt;/li&gt;
  &lt;li&gt;f(0) = 0, f(1) = 1, f(2) = 1&lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;p-np&quot;&gt;P-NP&lt;/h3&gt;
&lt;p&gt;어떤 문제는 P(Polynomial)문제와 NP(Non-Polynomial)(지수 factorial 등..)로 문제를 나눌 수 있습니다. 이를 기반으로 우리는 다루기 힘들다고 표현할 수 있습니다. 다루기 힘든 문제들은 비 다항식 크기의 결과를 요구하거나 결정 불가능한 비 현실적인 문제입니다.(ex : 해밀토니안 회로를 결정하는 (n-1)!개의 답이 있는 문제, Halting Problem)&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;P는 다차시간 알고리즘이 존재하는 모든 결정 문제들의 집합&lt;/li&gt;
  &lt;li&gt;NP(Nondeterministic Polynomial)는 다차시간 비 결정적 알고리즘으로 해결할 수 있는 결정 문제의 집합&lt;/li&gt;
  &lt;li&gt;결정적 알고리즘은 결과가 유일하게 정의된 연산만을 써서 만들어진 알고리즘&lt;/li&gt;
  &lt;li&gt;비 결정적 알고리즘은 연산 결과가 상황에 따라 달라질 수 있는 연산을 써서 만들어진 알고리즘&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;따라서 NP-Complete/Hard임이 확인되면 주어진 시간 내에서 최대한 좋은 해를 찾는 근사치 알고리즘 개발에 집중해야 합니다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;문제로-dp를-뿌셔보자&quot;&gt;문제로 DP를 뿌셔보자&lt;/h2&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;계수-값-구하기&quot;&gt;계수 값 구하기&lt;/h3&gt;
&lt;p&gt;다음 수식의 a의 값은? &lt;br /&gt;
$(x+y)^4 = x^4 + 4x^3y + ax^2y^2 + 4xy^3 + y^4$&lt;/p&gt;

&lt;p&gt;$ \begin{pmatrix} n \\ k \end{pmatrix} = \Biggl( \begin{matrix} \begin{pmatrix} n-1 \\ k-1 \end{pmatrix} + \begin{pmatrix} n-1 \\ k \end{pmatrix} &amp;amp; if \quad 0\;&amp;lt;\;k\;&amp;lt;\;n \\ 1 &amp;amp; if \quad k\;=\;0 \;or\; k\;=\;n \end{matrix} $&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/algorithm/Pascal_Triangle.jpg&quot; height=&quot;50%&quot; width=&quot;50%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;lislongest-increasing-subsequence-최장-증가-수열의-길이는&quot;&gt;LIS(Longest Increasing Subsequence) 최장 증가 수열의 길이는?&lt;/h3&gt;
&lt;p&gt;다음과 같이 어떤 수열이 왼쪽에서 오른쪽으로 나열돼 있다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;3, 2, 6, 4, 5, 1&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;이 배열 순서를 유지하면서 크기가 점진적으로 커지는 가장 긴 부분 수열은??&lt;br /&gt;
해결법&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Brute-Force 접근방법 $O(2^n)$&lt;br /&gt;
모든 부분 집합들을 순회하면서 가장 긴 부분 수열을 찾는다.&lt;/li&gt;
  &lt;li&gt;DP 접근방법 $O(n^{2})$&lt;br /&gt;
LIS[i] : $a_{1} ~ a_{i}$ 에서 최장 부분 수열의 길이&lt;br /&gt;
case 1 : LIS[i]가 $a_{i}$를 포함하지 않는다면, LIS[i] = LIS[i-1]&lt;br /&gt;
case 2 : LIS[i]가 $a_{i}$를 포함한다면, LIS[i] = LIS[i-1] + 1&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/algorithm/DP_LIS.jpg&quot; /&gt; &lt;br /&gt;
&lt;a href=&quot;https://github.com/KangSooHan/algorithm/blob/main/SWExpert/DP/LIS/main.cpp&quot;&gt;코드&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;최단-경로shortest-path-모든-쌍의-최단-경로는&quot;&gt;최단 경로(Shortest Path) 모든 쌍의 최단 경로는?&lt;/h3&gt;
&lt;p&gt;다음 각 정점 사이의 최단 경로는 얼마인가? &lt;br /&gt;
&lt;img src=&quot;/assets/img/algorithm/DP_GRAPH.jpg&quot; width=&quot;20%&quot; height=&quot;20%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;해결법&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Brute-Force 접근방법 $O(2^n)$&lt;br /&gt;
한 정점에서 다른 정점으로의 모든 경로의 길이를 구한 뒤 최소 길이를 구한다. \&lt;/li&gt;
  &lt;li&gt;각 점을 시작점으로 정하여 Dijkstra를 수행한다 $O(n^3)$ \&lt;/li&gt;
  &lt;li&gt;Floyd(모든 쌍 최단 경로 찾기) - Warshall(모든 쌍의 경로 존재 찾기) Algorhtm을 수행한다 $O(n^3)$.&lt;br /&gt;
&lt;img src=&quot;/assets/img/algorithm/Floyd-Warshall.jpg&quot; width=&quot;60%&quot; height=&quot;60%&quot; /&gt;&lt;br /&gt;
&lt;a href=&quot;https://github.com/KangSooHan/algorithm/blob/main/SWExpert/DP/Floyd-Warshall/main.cpp&quot;&gt;코드&lt;/a&gt;\&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;tsptraveling-salesman-problem-최소-여행-경비는&quot;&gt;TSP(Traveling Salesman Problem) 최소 여행 경비는?&lt;/h3&gt;
&lt;p&gt;휴가 기간에 다음 도시 들을 최소 이동 경비로 여행하고 싶다. 어느 순서로 여행하면 되나? 단 집에서 출발해서 여행이 끝나면 집으로 돌아와야 한다.&lt;br /&gt;
해결법&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Brute-Force 접근 방법 $O(N!)$&lt;br /&gt;
가능한 모든 여행 경로를 고려한 후 가장 짧은 여행 경로를 선택한다.&lt;/li&gt;
  &lt;li&gt;DP 접근방법&lt;br /&gt;
V는 모든 정점의 집합, A는 V의 부분집합&lt;br /&gt;
D[$V_{i}$][A]는 A에 속한 각 정점을 정확히 한번씩만 거쳐서 $V_{i}$에서 $V_{i}$으로 가는 최단 경로의 길이라고 하자.&lt;/li&gt;
&lt;/ol&gt;

</description>
        <pubDate>Wed, 25 Jan 2023 00:00:00 +0900</pubDate>
        <link>http://localhost:4000//2023/01/DP.html</link>
        <guid isPermaLink="true">http://localhost:4000//2023/01/DP.html</guid>
        
        
        <category>algorithm</category>
        
      </item>
    
      <item>
        <title>Graph</title>
        <description>&lt;h2 id=&quot;graph란&quot;&gt;Graph란?&lt;/h2&gt;
&lt;p&gt;그래프는 아이템들과 이들 사이의 연결 “관계”를 표현합니다. 이러한 관계를 표현하기 위해서 각각의 아이템을 정점(Vertex)와 관계 간선(Edge)들의 집합으로 구성된 자료구조입니다. 선형 자료구조나 트리 자료구조로 표현하기 어려운 N:N 관계를 가지는 원소들을 표현하기에 용이합니다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;정점(Vertex) V&lt;/li&gt;
  &lt;li&gt;간선(Edge) E&lt;/li&gt;
  &lt;li&gt;인접(Adjacency) A&lt;/li&gt;
  &lt;li&gt;경로 : 간선들을 순서대로 나열한 것&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/algorithm/Graph.jpg&quot; width=&quot;40%&quot; height=&quot;40%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;그래프-표현&quot;&gt;그래프 표현&lt;/h3&gt;
&lt;p&gt;그래프를 표현하는 방법을 대표적으로 3가지 있습니다.&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;인접 행렬(Adjacent Matrix) : |V| X |V| 크기의 2차원 배열을 이용하여 간선 정보를 저장
|V| X |V| 의 정방 행렬로 두 정점이 인접해 있으면 1, 그렇지 않으면 0으로 표현&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;인접 리스트(Adjacent List) : 각 정점마다 해당 정점으로 나가는 간선의 정보를 저장
하나의 정점에 대한 인접 정점들을 각각 노드로 하는 연결 리스트로 저장&lt;/li&gt;
  &lt;li&gt;간선의 배열 : 간선(시작 정점, 끝 정점)을 배열에 연속적으로 저장&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;그래프-탐색&quot;&gt;그래프 탐색&lt;/h3&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&quot;깊이-우선-탐색dfs&quot;&gt;깊이 우선 탐색(DFS)&lt;/h4&gt;
&lt;p&gt;시작 정점의 한 방향으로 깊이 탐색을 해 나가다가 갈 곳이 없게 되면 마지막에 만났던 갈림길에서 간선이 있는 정점으로 돌아와서 다른 방향의 정점으로 탐색을 해 나가는 알고리즘입니다. $\rightarrow$ 후입 선출 구조의 Stack을 사욯애서 구현할 수 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&quot;넓이-우선-탐색bfs&quot;&gt;넓이 우선 탐색(BFS)&lt;/h4&gt;
&lt;p&gt;시작 정점의 인접한 정점들을 모두 방문한 후에 방문했던 정점을 시작점으로 하여 다시 인ㅇ접한 정점들을 차례로 방문하는 방식입니다. 인접한 정점들에 대해 탐색을 한 후 차례로 다시 너비 우선 탐색을 진행합니다. $\rightarrow$ 선입 선출 구조의 Queue를 사용해서 구현할 수 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/algorithm/DFS_BFS.jpg&quot; width=&quot;70%&quot; height=&quot;70%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/KangSooHan/algorithm/blob/main/DataStructure/SinglyLinkedList/main.cpp&quot;&gt;Singly Linked List 구현&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://github.com/KangSooHan/algorithm/blob/main/DataStructure/DoublyLinkedList/main.cpp&quot;&gt;Doubly Linked List 구현&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Fri, 20 Jan 2023 00:00:00 +0900</pubDate>
        <link>http://localhost:4000//2023/01/Graph.html</link>
        <guid isPermaLink="true">http://localhost:4000//2023/01/Graph.html</guid>
        
        
        <category>algorithm</category>
        
      </item>
    
      <item>
        <title>SWExpert 1248 공통조상 - D5</title>
        <description>&lt;p&gt;문제 링크 : &lt;a href=&quot;https://swexpertacademy.com/main/talk/codeBattle/problemDetail.do?contestProbId=AV15PTkqAPYCFAYD&amp;amp;categoryId=AYWab_JKjkwDFAQK&amp;amp;categoryType=BATTLE&amp;amp;battleMainPageIndex=1&quot;&gt;https://swexpertacademy.com/main/talk/codeBattle/problemDetail.do?contestProbId=AV15PTkqAPYCFAYD&amp;amp;categoryId=AYWab_JKjkwDFAQK&amp;amp;categoryType=BATTLE&amp;amp;battleMainPageIndex=1&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;to-solve&quot;&gt;To Solve&lt;/h3&gt;
&lt;p&gt;이 문제는 Tree에 대해서 학습하기 위한 기본 문제 중 하나입니다. &lt;br /&gt;
이 문제를 해결 하기 위해선 우선 부모를 알 수 있는 트리를 구현해야 합니다. &lt;br /&gt;
그 이후 주어진 두개의 공통 조상을 계산해야 하는 문제였습니다. &lt;br /&gt;
두 개의 node를 받고 각각 node들의 조상들을 스택에 넣어둡니다. &lt;br /&gt;
공통의 조상을 가지려면 동일한 depth를 가지고 있어야 하기 때문에 node1의 조상 queue1과 node2의 조상 queue2의 깊이가 같아질 때 까지 queue을 pop해 줍니다. &lt;br /&gt;
그 이후에는 두 queue을 동시에 pop해 주면서 같은 결과가 나올 때 까지 pop했습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/algorithm/swea_1248.jpg&quot; width=&quot;50%&quot; height=&quot;50%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#include&lt;/span&gt; &lt;span class=&quot;cpf&quot;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;
&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Node&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Node&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;Node&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;node_pool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10002&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;queue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10002&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;insert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;pool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;Node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;empty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;queue&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nl&quot;&gt;public:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;BST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;s1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;s2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;root&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;nullptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10002&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;node_pool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;nullptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;node_pool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;nullptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;node_pool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;right&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;nullptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;insert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;child&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;node_pool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;child&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;child&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;node_pool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;node_pool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;child&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;node_pool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;node_pool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;nullptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;node_pool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;node_pool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;child&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;node_pool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;right&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;node_pool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;child&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;subtree&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;node_num&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;s1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cnt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;s1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;insert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;node_pool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;node_num&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;cnt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;empty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;Node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;nullptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;s1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;insert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;cnt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;right&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;nullptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;s1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;insert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;cnt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cnt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ancestor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;s1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;s2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;Node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;node1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;node_pool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;node2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;node_pool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;node1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;nullptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;s1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;insert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;node1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;node1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;node1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;node2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;nullptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;s2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;insert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;node2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;node2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;node2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;empty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;empty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;Node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;na&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;Node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nb&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;na&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;na&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;BST&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bst&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{};&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;freopen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;input.txt&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;r&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stdin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;scanf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%d&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;bst&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;V&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;E&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;scanf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%d %d %d %d&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;V&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;E&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;E&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;child&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;scanf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%d %d&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;child&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;bst&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;insert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;child&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;anc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bst&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ancestor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;#%d %d %d&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;anc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bst&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subtree&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;anc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;
&lt;a href=&quot;https://github.com/KangSooHan/algorithm/blob/main/SWExpert/TREE/1248/main.cpp&quot;&gt;Code&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Thu, 19 Jan 2023 00:00:00 +0900</pubDate>
        <link>http://localhost:4000//2023/01/swexpert-1248.html</link>
        <guid isPermaLink="true">http://localhost:4000//2023/01/swexpert-1248.html</guid>
        
        
        <category>algorithm</category>
        
      </item>
    
  </channel>
</rss>
